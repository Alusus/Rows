import "Apm";
Apm.importFile("Alusus/Rows", { "Rows.alusus", "Drivers/Mysql.alusus" });
use Srl;
use Rows;

@model["cars"]
class Car {
    define_model_essentials[];

    @notNull
    @primaryKey
    @Integer
    @column
    def id: Int;

    @VarChar["50"]
    @defult["My Car"]
    @column
    def name: String;

    @Float
    @column
    def price: Nullable[Float];

    @VarChar["50"]
    @column
    def fullName: Nullable[String];

    @Boolean
    @column
    def electrical: Bool;
}

def db: Db(MysqlDriver(ConnectionParams().{
    dbName = "alusus";
    userName = "alusus";
    password = "alusus";
    host = "0.0.0.0";
}));
if !db.isConnected() {
    System.fail(1, String("Error connecting to DB: ") + db.getLastError());
}

db.schemaBuilder[Car].create();

db.from[Car].delete();

def i: int=1
for i = 1, i < 30, i = i+1 {
    def c: Car;
    c.id = i
    c.name = String("Car ") + i;
    c.price = 200.0 * i
    c.electrical = i > 15;
    db.save[Car](c);
}
Console.print("\n");

func printRows (r: Array[SrdRef[Car]]) {
    def k: int=0;
    for k = 0, k < r.getLength(), k = k+1 {
        Console.print(r(k).id);
        Console.print("\t\t");
        Console.print(r(k).name);
        Console.print("\t\t");
        if r(k).price.isNull Console.print("NULL") else Console.print(r(k).price~cast[Float]);
        Console.print("\t\t");
        if r(k).electrical Console.print("electrical")
        else Console.print("traditional");
        if not r(k).fullName.isNull {
            Console.print("\t\t");
            Console.print(r(k).fullName);
        }
        Console.print("\n");
    }
}

def d: Array[SrdRef[Car]];
d = db.from[Car].where[(price < 1000 or price > 5000) and id > 2].select();
printRows(d);
Console.print("\n");

d(0).delete();

d(1).name = String("Car 4u");
d(1).price = 400;
d(1).save();

db.from[Car].where[id == 20].update[{ price=Nullable[Float](), name="BMW", fullName = "BMW X5" }];

db.from[Car].where[id > 23 and id <= 28].delete();

d = db.from[Car].select();
printRows(d);
Console.print("\n");

d = db.from[Car].where[not (id > 10)].select();
printRows(d);
Console.print("\n");

d = db.from[Car].where[!(id in (1, 5, 7, 2))].select();
printRows(d);
Console.print("\n");

d = db.from[Car].where[id in (1, 2, 4, 5, 7)].order[(-price, id)].select();
printRows(d);
Console.print("\n");

d = db.from[Car].where[id in (1, 2, 4, 5, 7)].order[(-price, -id)].select();
printRows(d);
Console.print("\n");

d = db.from[Car].where[fullName != Nullable[String]()].select();
printRows(d);
