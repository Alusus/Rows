@merge module Rows {
    func getEscapedStringLength (input: ptr[Char], stopAtPlaceholder: Bool): ArchInt {
        def count: ArchInt = 0;
        while input~cnt != 0 {
            if input~cnt == '\'' or input~cnt == '\"' or input~cnt == '\\' or input~cnt == '\n' or input~cnt == '\r' {
                ++count;
            } else if input~cnt == 0x1Aui8 {
                // Skip the sub ascii character.
                --count;
            } else if stopAtPlaceholder and input~cnt == '%' {
                def types: ptr[array[Char]] = "psilfd";
                if (input + 1)~cnt == '%' {
                    input = input + 1;
                } else if String.find(types, (input + 1)~cnt) != 0 {
                    break;
                } else if (input + 1)~cnt == 'a' and String.find(types, (input + 2)~cnt) != 0 {
                    break;
                }
            }
            ++count;
            input = input + 1;
        }
        return count;
    }

    func escapeString (input: ptr[Char], output: ptr[Char], stopAtPlaceholder: Bool): ptr[Char] {
        while input~cnt != 0 {
            if input~cnt == '\'' or input~cnt == '\"' or input~cnt == '\\' or input~cnt == '\n' or input~cnt == '\r' {
                output~cnt = '\\';
                output = output + 1;
            } else if input~cnt == 0x1Aui8 {
                // Skip the sub ascii character.
                input = input + 1;
                continue;
            } else if stopAtPlaceholder and input~cnt == '%' {
                def types: ptr[array[Char]] = "psilfd";
                if (input + 1)~cnt == '%' {
                    input = input + 1;
                } else if String.find(types, (input + 1)~cnt) != 0 {
                    break;
                } else if (input + 1)~cnt == 'a' and String.find(types, (input + 2)~cnt) != 0 {
                    break;
                }
            }
            if input~cnt == '\n' output~cnt = 'n'
            else if input~cnt == '\r' output~cnt = 'r'
            else output~cnt = input~cnt;
            output = output + 1;
            input = input + 1;
        }
        output~cnt = 0;
        return input;
    }

    func escapeString (input: ptr[Char]): String {
        def length: ArchInt = getEscapedStringLength(input, false);
        def output: String;
        output.alloc(length);
        escapeString(input, output.buf, false);
        return output;
    }

    func escapeString (input: Int[64]): String {
        return String() + input;
    }

    func escapeString (input: Float[64]): String {
        return String() + input;
    }

    macro prepareStatement [output, statement, args] {
        def currentSize: ArchInt = 0;
        def fmt: ptr[Char] = statement;
        while fmt~cnt != 0 {
            def chunkSize: ArchInt = getEscapedStringLength(fmt, true);
            output.realloc(currentSize + chunkSize);
            fmt = escapeString(fmt, output.buf + currentSize, true);
            currentSize += chunkSize;

            if fmt~cnt == '%' {
                fmt = fmt + 1;
                if fmt~cnt == 's' {
                    currentSize += appendReplacement(output, currentSize, args~next_arg[String]);
                    fmt = fmt + 1;
                } else if fmt~cnt == 'p' {
                    currentSize += appendReplacement(output, currentSize, args~next_arg[CharsPtr]);
                    fmt = fmt + 1;
                } else if fmt~cnt == 'i' {
                    currentSize += appendReplacement(output, currentSize, args~next_arg[Int]);
                    fmt = fmt + 1;
                } else if fmt~cnt == 'l' {
                    currentSize += appendReplacement(output, currentSize, args~next_arg[Int[64]]);
                    fmt = fmt + 1;
                } else if fmt~cnt == 'f' {
                    currentSize += appendReplacement(output, currentSize, args~next_arg[Float[32]]);
                    fmt = fmt + 1;
                } else if fmt~cnt == 'd' {
                    currentSize += appendReplacement(output, currentSize, args~next_arg[Float[64]]);
                    fmt = fmt + 1;
                } else if fmt~cnt == 'a' and (fmt + 1)~cnt == 's' {
                    currentSize += appendReplacementArray[String](
                        output, currentSize, args~next_arg[Array[String]]
                    );
                    fmt = fmt + 2;
                } else if fmt~cnt == 'a' and (fmt + 1)~cnt == 'p' {
                    currentSize += appendReplacementArray[CharsPtr](
                        output, currentSize, args~next_arg[Array[CharsPtr]]
                    );
                    fmt = fmt + 2;
                } else if fmt~cnt == 'a' and (fmt + 1)~cnt == 'i' {
                    currentSize += appendReplacementArray[Int](
                        output, currentSize, args~next_arg[Array[Int]]
                    );
                    fmt = fmt + 2;
                } else if fmt~cnt == 'a' and (fmt + 1)~cnt == 'l' {
                    currentSize += appendReplacementArray[Int[64]](
                        output, currentSize, args~next_arg[Array[Int[64]]]
                    );
                    fmt = fmt + 2;
                } else if fmt~cnt == 'a' and (fmt + 1)~cnt == 'f' {
                    currentSize += appendReplacementArray[Float[32]](
                        output, currentSize, args~next_arg[Array[Float[32]]]
                    );
                    fmt = fmt + 2;
                } else if fmt~cnt == 'a' and (fmt + 1)~cnt == 'd' {
                    currentSize += appendReplacementArray[Float[64]](
                        output, currentSize, args~next_arg[Array[Float[64]]]
                    );
                    fmt = fmt + 2;
                }
            }
        }
        (output.buf~cast[ptr[Char]] + currentSize)~cnt = 0;
    }

    func appendReplacement (output: ref[String], currentSize: ArchInt, str: ptr[array[Char]]): ArchInt {
        def replacementSize: ArchInt = getEscapedStringLength(str, false);
        output.realloc(currentSize + replacementSize + 2);
        (output.buf~cast[ptr[Char]] + currentSize)~cnt = '\'';
        escapeString(str, output.buf + currentSize + 1, false);
        (output.buf~cast[ptr[Char]] + currentSize + 1 + replacementSize)~cnt = '\'';
        return replacementSize + 2;
    }

    func appendReplacement (output: ref[String], currentSize: ArchInt, str: String): ArchInt {
        return appendReplacement(output, currentSize, str.buf);
    }

    func appendReplacement (output: ref[String], currentSize: ArchInt, num: Int[64]): ArchInt {
        def buffer: array[Char, 50];
        def replacementSize: ArchInt = String.assign(buffer~ptr, "%ld", num);
        output.realloc(currentSize + replacementSize);
        String.copy(output.buf + currentSize, buffer~ptr);
        return replacementSize;
    }

    func appendReplacement (output: ref[String], currentSize: ArchInt, num: Float[64]): ArchInt {
        def buffer: array[Char, 50];
        def replacementSize: ArchInt = String.assign(buffer~ptr, "%f", num);
        output.realloc(currentSize + replacementSize);
        String.copy(output.buf + currentSize, buffer~ptr);
        return replacementSize;
    }

    func appendReplacementArray [DataType: type] (
        output: ref[String], currentSize: ArchInt, values: Array[DataType]
    ): ArchInt {
        def i: Int;
        def replacementSize: ArchInt = 0;
        for i = 0, i < values.getLength(), ++i {
            if i != 0 {
                output.realloc(currentSize + replacementSize + 1);
                (output.buf~cast[ptr[Char]] + currentSize + replacementSize)~cnt = ',';
                ++replacementSize;
            }
            replacementSize += appendReplacement(output, currentSize + replacementSize, values(i));
        }
        return replacementSize;
    }
}

