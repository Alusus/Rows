@merge module Rows {
    def modifierKeywordTranslations: Map[String, String];

    function generateVarNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr) {
        generateStrings(getVarNames(parent, modifierKwd));
    }

    function getVarNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr): Array[String] {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            (ast elementType == "var"),
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def result: Array[String];
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            if modifierKwd != 0 and findElementModifier(elements(i), modifierKwd)~ptr == 0 continue;
            def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
            def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
            def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);
            result.add(castRef[binding.getMember("name"), TiStr].value);
        }
        return result;
    }

    function generateColumnNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr) {
        generateStrings(getColumnNames(parent, modifierKwd));
    }

    function getColumnNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr): Array[String] {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            (ast elementType == "var"),
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def result: Array[String];
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            if modifierKwd != 0 and findElementModifier(elements(i), modifierKwd)~ptr == 0 continue;
            def modifier: ref[Core.Basic.TiObject](findElementModifier(elements(i), "column"));
            if modifier~ptr == 0 {
                result.add(String());
                continue;
            }
            def params: Array[String] = getModifierParams(modifier);
            if params.getLength() > 0 {
                result.add(params(0));
            } else {
                def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
                def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
                def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);
                result.add(castRef[binding.getMember("name"), TiStr].value);
            }
        }
        return result;
    }

    function getVarTypes (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr): Array[ref[Spp.Ast.Type]] {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            (ast elementType == "var"),
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def result: Array[ref[Spp.Ast.Type]];
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            if modifierKwd != 0 and findElementModifier(elements(i), modifierKwd)~ptr == 0 continue;
            result.add(Spp.astMgr.traceType(elements(i)));
        }
        return result;
    }

    function generateStrings (strs: Array[String]) {
        def i: Int;
        for i = 0, i < strs.getLength(), ++i {
            Spp.astMgr.insertAst(
                (ast Srl.String("{{str}}")),
                Srl.Map[Srl.String, ref[Core.Basic.TiObject]]().set(Srl.String("str"), TiStr(strs(i)))
            );
        }
    }

    function getVarModifiers (
        parent: ref[Core.Basic.TiObject],
        modsKeywords: ref[Array[Array[String]]],
        modsParams: ref[Array[Array[Array[String]]]]
    ) {
        def elements: Array[ref[Core.Basic.TiObject]];
        def i: int = 0;
        def j: int = 0;
        elements = Spp.astMgr.findElements(
            (ast elementType == "var"),
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        modsKeywords = getElementsModifierKeywords(elements);

        for i = 0, i < modsKeywords.getLength(), ++i {
            def params: Array[Array[String]];
            for j = 0, j < modsKeywords(i).getLength(), ++j {
                params.add(getElementModifierParams(elements(i), modsKeywords(i)(j)));
            }
            modsParams.add(params);
        }
    }

    function getElementsModifierKeywords (elements: Array[ref[Core.Basic.TiObject]]): Array[Array[String]] {
        def modsKeywords: Array[Array[String]];
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            modsKeywords.add(getElementModifierKeywords(elements(i)));
        }
        return modsKeywords;
    }

    function getElementModifierKeywords (element: ref[Core.Basic.TiObject]): Array[String] {
        def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
        def i: Int;
        def results: Array[String];
        if modifiers~ptr != 0 {
            for i = 0, i < modifiers.getElementCount()~cast[Int], ++i {
                def kwd: String = Spp.astMgr.getModifierKeyword(modifiers.getElement(i));
                def translatedKwd: String = modifierKeywordTranslations(kwd);
                if translatedKwd == "" translatedKwd = kwd;
                results.add(translatedKwd);
            }
        }
        return results;
    }

    function getElementModifierParams (element: ref[Core.Basic.TiObject], modName: CharsPtr): Array[String] {
        def modifier: ref[Core.Basic.TiObject](findElementModifier(element, modName));
        if modifier~ptr != 0 return getModifierParams(modifier)
        else return Array[String]();
    }

    function findElementModifier (element: ref[Core.Basic.TiObject], modName: CharsPtr): ref[Core.Basic.TiObject] {
        def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
        if modifiers~ptr == 0 return nullRef[Core.Basic.TiObject];
        def i: Int;
        for i = 0, i < modifiers->getElementCount()~cast[Int], ++i {
            def modifier: ref[Core.Basic.TiObject](modifiers.getElement(i));
            if modifier~ptr == 0 continue;
            def kwd: String = Spp.astMgr.getModifierKeyword(modifier);
            def translatedKwd: String = modifierKeywordTranslations(kwd);
            if translatedKwd == "" translatedKwd = kwd;
            if translatedKwd == modName return modifier;
        }
        return nullRef[Core.Basic.TiObject];
    }

    function getModifierParams (modifier: ref[Core.Basic.TiObject]): Array[String] {
        def params: Srl.Array[Srl.String];
        Spp.astMgr.getModifierStringParams(modifier, params);
        return params;
    }
}

