@merge module Rows {
    def modifierKeywordTranslations: Map[String, String];

    function generateVarNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr) {
        generateStrings(getVarNames(parent, modifierKwd));
    }

    function getVarNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr): Array[String] {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            (ast elementType == "var"),
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def result: Array[String];
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            if modifierKwd != 0 and findElementModifier(elements(i), modifierKwd)~ptr == 0 continue;
            result.add(getVarName(elements(i)));
        }
        return result;
    }

    function getVarName (var: ref[Core.Basic.TiObject]): String {
        def node: ref[Core.Data.Node](castRef[var, Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
        def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);
        return castRef[binding.getMember("name"), TiStr].value;
    }

    function generateColumnNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr) {
        generateStrings(getColumnNames(parent, modifierKwd));
    }

    function getColumnNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr): Array[String] {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            (ast elementType == "var"),
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def result: Array[String];
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            if modifierKwd != 0 and findElementModifier(elements(i), modifierKwd)~ptr == 0 continue;
            result.add(getColumnName(elements(i)));
        }
        return result;
    }

    function getColumnName (var: ref[Core.Basic.TiObject]): String {
        def modifier: ref[Core.Basic.TiObject](findElementModifier(var, "column"));
        if modifier~ptr == 0 return getVarName(var);
        def params: Array[String] = getModifierParams(modifier);
        if params.getLength() > 0 {
            return params(0);
        } else {
            return getVarName(var);
        }
    }

    function getVars (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr): Array[ref[Core.Basic.TiObject]] {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            (ast elementType == "var"),
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def result: Array[ref[Core.Basic.TiObject]];
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            if modifierKwd != 0 and findElementModifier(elements(i), modifierKwd)~ptr == 0 continue;
            result.add(elements(i));
        }
        return result;
    }

    function generateStrings (strs: Array[String]) {
        def i: Int;
        for i = 0, i < strs.getLength(), ++i {
            Spp.astMgr.insertAst(
                (ast Srl.String("{{str}}")),
                Srl.Map[Srl.String, ref[Core.Basic.TiObject]]().set(Srl.String("str"), TiStr(strs(i)))
            );
        }
    }

    function getVarModifiers (
        var: ref[Core.Basic.TiObject],
        modsKeywords: ref[Array[String]],
        modsParams: ref[Array[Array[String]]]
    ) {
        modsKeywords = getElementModifierKeywords(var);

        def j: Int;
        for j = 0, j < modsKeywords.getLength(), ++j {
            modsParams.add(getElementModifierParams(var, modsKeywords(j)));
        }
    }

    function getElementModifierKeywords (element: ref[Core.Basic.TiObject]): Array[String] {
        def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
        def i: Int;
        def results: Array[String];
        if modifiers~ptr != 0 {
            for i = 0, i < modifiers.getElementCount()~cast[Int], ++i {
                def kwd: String = Spp.astMgr.getModifierKeyword(modifiers.getElement(i));
                def translatedKwd: String = modifierKeywordTranslations(kwd);
                if translatedKwd == "" translatedKwd = kwd;
                results.add(translatedKwd);
            }
        }
        return results;
    }

    function getElementModifierParams (element: ref[Core.Basic.TiObject], modName: CharsPtr): Array[String] {
        def modifier: ref[Core.Basic.TiObject](findElementModifier(element, modName));
        if modifier~ptr != 0 return getModifierParams(modifier)
        else return Array[String]();
    }

    function findElementModifier (element: ref[Core.Basic.TiObject], modName: CharsPtr): ref[Core.Basic.TiObject] {
        def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
        if modifiers~ptr == 0 return nullRef[Core.Basic.TiObject];
        def i: Int;
        for i = 0, i < modifiers->getElementCount()~cast[Int], ++i {
            def modifier: ref[Core.Basic.TiObject](modifiers.getElement(i));
            if modifier~ptr == 0 continue;
            def kwd: String = Spp.astMgr.getModifierKeyword(modifier);
            def translatedKwd: String = modifierKeywordTranslations(kwd);
            if translatedKwd == "" translatedKwd = kwd;
            if translatedKwd == modName return modifier;
        }
        return nullRef[Core.Basic.TiObject];
    }

    function getModifierParams (modifier: ref[Core.Basic.TiObject]): Array[String] {
        def params: Srl.Array[Srl.String];
        Spp.astMgr.getModifierStringParams(modifier, params);
        return params;
    }

    func getTableName (classAst: ref[Core.Basic.TiObject]): String {
        def params: Array[String] = getElementModifierParams(classAst, "model");
        if params.getLength() != 1 {
            Spp.buildMgr.raiseBuildNotice("ROWS1001", 1, classAst);
            params.add(String("MISSING_TABLE_NAME"));
        }
        return params(0);
    }
}

