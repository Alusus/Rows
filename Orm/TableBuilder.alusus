@merge module Rows {
    def dataTypeArray: Array[String];
    def dataTypeString: String;
    def dataTypePtr: ptr[Data];
    def paramsModsArray: Array[String];
    def val: String;
    def integerDataType: Integer;
    def bigIntegerDataType: BigInteger;
    def smallIntegerDataType: SmallInteger;
    def tinyIntegerDataType: TinyInteger;
    def realDataType: Real;
    def floatDataType: Float;

    def decimalDataType: Decimal;
    def xmlDataType: Xml;
    def varCharDataType: VarChar;
    def charTypeDataType: CharType;
    def textDataType: Text;
    def dateDataType: Date;

    function generateAddingElementMods (
        elements: Array[ref[Core.Basic.TiObject]] , var : Array[String]
    ): Array[Array[String]] {
        def i: Int;
        def colsMod: Array[Array[String]];
        def strArray: Array[String];
        def modArray: Array[String];

        for i = 0, i < elements.getLength(), ++i {
            strArray=dumpModifiers(elements(i));
            modArray.add(var(i))
            colsMod.add(strArray);
        }

        return colsMod;
    }

    macro implementGetElementNames [condition, parent] {
        Array[String]().{
            preprocess {
                def elements: Array[ref[Core.Basic.TiObject]];
                elements = Spp.astMgr.findElements(
                    ast { condition },
                    parent,
                    Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
                );
                generateAddingElementNames(String("this"), elements);
            }
        }
    }

    macro implementGetElementMods [condition, parent] {
        def elements: Array[ref[Core.Basic.TiObject]];
        def i: int = 0;
        def j: int = 0;
        elements = Spp.astMgr.findElements(
            ast { condition },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        colsMod = generateAddingElementMods(elements, var);
        def params: Array[String];
        def cmpar: Array[Array[String]];

        for i = 0, i < colsMod.getLength(), ++i {
            cmpar.clear();
            if colsMod(i).getLength() > 0 {
                for j = 0, j < colsMod(i).getLength(), ++j {
                    params = dumpElementModifierParams(elements(i), colsMod(i)(j).buf);
                    cmpar.add(params);
                }
            } else {
                def noParams: Array[String];
                cmpar.add(noParams);
            }
            modsParams.add(cmpar);
        }
    }

    macro implementGetElementTypes [condition, parent] {
        Array[String]().{
            preprocess {
                def elements: Array[ref[Core.Basic.TiObject]];
                elements = Spp.astMgr.findElements(
                    ast { condition },
                    parent,
                    Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
                );
                generateAddingElementTypes(String("this"), elements);
            }
        }
    }

    function numOfParams (mod : String): int {
        def i: Int;
        def paramsModsArray: Array[String];
        paramsModsArray.add(String("notnull"));
        paramsModsArray.add(String("unique"));
        paramsModsArray.add(String("pk"));
        paramsModsArray.add(String("defult"));
        paramsModsArray.add(String("check"));
        paramsModsArray.add(String("fk"));

        for i = 0, i < paramsModsArray.getLength()-1, ++i {
            if mod == paramsModsArray(i) {
                if i < 3 return 0
                else if i < 5 return 1
                else if i == 5 return 2;
            }
        }
        return -1;
    }

    function dumpModifiers (element: ref[Core.Basic.TiObject]): Array[String] {
        def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
        def i: Int;
        def strArray: Array[String] ;
        if modifiers~ptr != 0 {
            for i = 0, i < modifiers.getElementCount()~cast[Int], ++i {
                strArray.add(Spp.astMgr.getModifierKeyword(modifiers.getElement(i)));
            }
        }
        return strArray;
    }

    function dumpModifierParams (modifier: ref[Core.Basic.TiObject]): Array[String] {
        def params: Srl.Array[Srl.String];
        Spp.astMgr.getModifierStringParams(modifier, params);
        return params;
    }

    function dumpElementModifierParams (element: ref[Core.Basic.TiObject], modName: ptr[array[Char]]): Array[String] {
        def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
        def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifier(modifiers, modName));
        def params: Array[String];
        params = dumpModifierParams(modifier);
        return params;
    }

    function dumpElementModifierParams2 (element: ref[Core.Basic.TiObject], modName: ptr[array[Char]]) {
        def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(element, modName));
        dumpModifierParams(modifier);
    }

    function isDataType (varType : String): int {
        def si : int ;
        def dataTypeArray:Array[String];
        def dataTypeString : String;
        dataTypeArray.add(String("Integer"));
        dataTypeArray.add(String("BigInteger"));
        dataTypeArray.add(String("SmallInteger"));
        dataTypeArray.add(String("TinyInteger"));
        dataTypeArray.add(String("Real"));
        dataTypeArray.add(String("Float"));
        dataTypeArray.add(String("Decimal"));
        dataTypeArray.add(String("Xml"));
        dataTypeArray.add(String("VarChar"));
        dataTypeArray.add(String("CharType"));
        dataTypeArray.add(String("Text"));
        dataTypeArray.add(String("Date"));

        for si = 0, si < dataTypeArray.getLength(), ++si {
            if dataTypeArray(si) == varType {
                return si;
            }
        }
        return -1;
    }

    func generateTable (
        tableName: String, colsMod: Array[Array[String]], modsParams: Array[ Array[Array[String]]],
        var: Array[String], types: Array[String]
    ): TioSrdRef {
        use Core.Basic;
        def result: TioSrdRef;
        def resArray: Array[TioSrdRef];

        def i: int;
        def j: int;
        def k: int;
        def c: int;
        def index: int;

        if !Spp.astMgr.buildAst(
            (ast def mysqlObj: MySql.Db),
            Map[String, ref[TiObject]]().set(String("mysqlObj"), Core.Data.Ast.Identifier("mysqlObj")),
            result
        ) {
            System.fail(1, "generateTable/build table var : error\n");
        }
        resArray.add(result);
        k=0;
        for i = 0, i < var.getLength(), i += 1 {
            index = -1;
            for j = 0, j < colsMod(i).getLength() && index == -1, j += 1 {
                index=isDataType(colsMod(i)(j));
            }

            if index > -1 {
                if index == 0 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = integerDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("integerDataType"), Core.Data.Ast.Identifier("integerDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 1 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = bigIntegerDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("bigIntegerDataType"), Core.Data.Ast.Identifier("bigIntegerDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 2 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = smallIntegerDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("smallIntegerDataType"), Core.Data.Ast.Identifier("smallIntegerDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 3 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = tinyIntegerDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("tinyIntegerDataType"), Core.Data.Ast.Identifier("tinyIntegerDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 4 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = realDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("realDataType"), Core.Data.Ast.Identifier("realDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if (index==5) {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = floatDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("floatDataType"), Core.Data.Ast.Identifier("floatDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 6 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = decimalDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("decimalDataType"), Core.Data.Ast.Identifier("decimalDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 7 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = xmlDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("xmlDataType"), Core.Data.Ast.Identifier("xmlDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 8 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = varCharDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("varCharDataType"), Core.Data.Ast.Identifier("varCharDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 9 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = charTypeDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("charTypeDataType"), Core.Data.Ast.Identifier("charTypeDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 10 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = textDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("textDataType"), Core.Data.Ast.Identifier("textDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                } else if index == 11 {
                    if !Spp.astMgr.buildAst(
                        ast {
                            beforData;
                            table.setColumnNames(String("{{varname}}"));
                            dataTypePtr = dateDataType~ptr;
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("beforData"), resArray(k))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("dateDataType"), Core.Data.Ast.Identifier("dateDataType")),
                        result
                    ) {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k = k + 1;
                }
                resArray.add(result)

                for j = 0, j < colsMod(i).getLength(), j += 1 {
                    if numOfParams(colsMod(i)(j)) != -1 {
                        if colsMod(i)(j) == "notnull" {
                            if !Spp.astMgr.buildAst(
                                ast {
                                    beforData;
                                    dataTypePtr~cnt.fieldConstraints.setNotNullConstraint();
                                },
                                Map[String, ref[TiObject]]()
                                    .set(String("beforData"), resArray(k))
                                    .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                                    .set(String("dateDataType"), Core.Data.Ast.Identifier("dateDataType")),
                                result
                            ) {
                                System.fail(1, "generateTable/build Data Type var : error\n");
                            }
                            k = k + 1;
                        } else if colsMod(i)(j) == "unique" {
                            if !Spp.astMgr.buildAst(
                                ast {
                                    beforData;
                                    dataTypePtr~cnt.fieldConstraints.setUniqueConstraint();
                                },
                                Map[String, ref[TiObject]]()
                                    .set(String("beforData"), resArray(k))
                                    .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                                    .set(String("dateDataType"), Core.Data.Ast.Identifier("dateDataType")),
                                result
                            ) {
                                System.fail(1, "generateTable/build Data Type var : error\n");
                            }
                            k = k + 1;
                        } else if colsMod(i)(j) == "pk" {
                            if !Spp.astMgr.buildAst(
                                ast {
                                    beforData;
                                    pkArray.add(String("{{varname}}"));
                                },
                                Map[String, ref[TiObject]]()
                                    .set(String("beforData"), resArray(k))
                                    .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                                    .set(String("dateDataType"), Core.Data.Ast.Identifier("dateDataType")),
                                result
                            ) {
                                System.fail(1, "generateTable/build Data Type var : error\n");
                            }
                            k = k + 1;
                        }
                        if numOfParams(colsMod(i)(j)) > 0 {
                            if colsMod(i)(j) == "defult" {
                                if !Spp.astMgr.buildAst(
                                    ast {
                                        beforData;
                                        dataTypePtr~cnt.fieldConstraints.setDefaultConstraint(String("{{myvar}}"));
                                    },
                                    Map[String, ref[TiObject]]()
                                        .set(String("beforData"), resArray(k))
                                        .set(String("myvar"), Core.Data.Ast.Identifier(modsParams(i)(j)(0)))
                                        .set(String("dateDataType"), Core.Data.Ast.Identifier("dateDataType")),
                                    result
                                ) {
                                    System.fail(1, "generateTable/build Data Type var : error\n");
                                }
                                k = k + 1;
                            } else if colsMod(i)(j) == "check" {
                                if !Spp.astMgr.buildAst(
                                    ast {
                                        beforData;
                                        dataTypePtr~cnt.fieldConstraints.setCheckConstraint(String("{{myvar}}"));
                                    },
                                    Map[String, ref[TiObject]]()
                                        .set(String("beforData"), resArray(k))
                                        .set(String("myvar"), Core.Data.Ast.Identifier(modsParams(i)(j)(0)))
                                        .set(String("dateDataType"), Core.Data.Ast.Identifier("dateDataType")),
                                    result
                                ) {
                                    System.fail(1, "generateTable/build Data Type var : error\n");
                                }
                                k = k + 1;
                            } else if colsMod(i)(j) == "fk" {
                                if !Spp.astMgr.buildAst(
                                    ast {
                                        beforData;
                                        tableConst.addForgenKey(
                                            String("{{myvar}}"),
                                            String("{{myvar2}}"),
                                            String("{{myvar3}}")
                                        );
                                    },
                                    Map[String, ref[TiObject]]()
                                        .set(String("beforData"), resArray(k))
                                        .set(String("myvar"), Core.Data.Ast.Identifier(modsParams(i)(j)(0)))
                                        .set(String("myvar2"), Core.Data.Ast.Identifier(modsParams(i)(j)(3)))
                                        .set(String("myvar3"), Core.Data.Ast.Identifier(modsParams(i)(j)(2)))
                                        .set(String("dateDataType"), Core.Data.Ast.Identifier("dateDataType")),
                                    result
                                ) {
                                    System.fail(1, "generateTable/build Data Type var : error\n");
                                }
                                k = k + 1;
                            }
                        }
                        resArray.add(result);
                    }
                }
                if !Spp.astMgr.buildAst(
                    ast {
                        beforData;
                        table.setDataType(dataTypePtr);
                        table.addToColsString();
                        dataTypePtr~cnt.fieldConstraints.clearFConstraint();
                    },
                    Map[String, ref[TiObject]]()
                        .set(String("beforData"), resArray(k))
                        .set(String("myvar"), Core.Data.Ast.Identifier(modsParams(i)(j)(0)))
                        .set(String("myvar2"), Core.Data.Ast.Identifier(modsParams(i)(j)(3)))
                        .set(String("myvar3"), Core.Data.Ast.Identifier(modsParams(i)(j)(2)))
                        .set(String("dateDataType"), Core.Data.Ast.Identifier("dateDataType")),
                    result
                ) {
                    System.fail(1, "generateTable/build Data Type var : error\n");
                }
                k = k + 1;
                resArray.add(result);
            }
        }

        if !Spp.astMgr.buildAst(
            (ast function create(dbCon: DbConBuilder) {
                def dataTypePtr: ptr[Data];
                def integerDataType: Integer;
                def bigIntegerDataType: BigInteger;
                def smallIntegerDataType: SmallInteger;
                def tinyIntegerDataType: TinyInteger;
                def realDataType: Real;
                def floatDataType: Float;
                def decimalDataType: Decimal;
                def xmlDataType: Xml;
                def varCharDataType: VarChar;
                def charTypeDataType: CharType;
                def textDataType: Text;
                def dateDataType: Date;
                def paramsModsArray: Array[String];
                def val: String;
                def mysqlObj: MySql.Db ;
                def pgsqlObj: PostgreSql.Db ;
                def pkArray: Array[String];
                def tableConst: TableConstraints;
                def table: Create;
                def columnNames: Array[String];
                def tableNameMod: String;
                if dbCon.getDbConType() == 0 {
                    mysqlObj = dbCon.mySqlConBuilder();
                    table.setMysqlObj(mysqlObj);
                } else if dbCon.getDbConType() == 0 {
                    pgsqlObj=dbCon.pgSqlConBuilder();
                    table.setPgSqlObj(pgsqlObj);
                }
                insertCols;
                tableConst.setPrimaryKeyConstraint(pkArray);
                table.setTConst(tableConst~ptr);
                table.setTConstString();
                table.generateExecString();
                table.setTableName(String("{{tableName}}"));
                def ex: String;
                table.generateExecString();
                ex = table.getExecString();
                table.exec();
            }),
            Map[String, ref[TiObject]]()
                .set(String("insertCols"), resArray(k))
                .set(String("tableName"), Core.Data.Ast.Identifier(tableName))
                .set(String("dateDataType"), Core.Data.Ast.Identifier("dateDataType")),
            result
        ) {
            System.fail(1, "generateTable/build Data Type var : error\n");
        }
        return result;
    }

    macro autoCreate [parent, tableName] {
        preprocess {
            def colsMod: Array[Array[String]];
            def modsParams: Array[ Array[Array[String]]];
            def var: Array[String];
            var = implementGetElementNames[elementType == "var", parent];
            def types: Array[String];
            types = implementGetElementTypes[elementType == "var", parent];
            implementGetElementMods[elementType == "var", parent];

            if !Spp.astMgr.insertAst(
                generateTable(tableName , colsMod , modsParams , var ,types ).obj
            ) {
                System.fail(1, "Failed to insert statment.\n");
            }
        }
    }
}

