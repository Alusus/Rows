@merge module Rows {
    macro define_model_essentials {
        def db: ref[Rows.Db];
        db~ptr = 0;
        handler this.save(): Srl.Possible[Int] {
            if this.db~ptr != 0 return Rows.Query[this_type](this.db).save(this)
            else return Srl.Possible[Int].failure(Rows.Errors.connectionMissing());
        }
        handler this.delete(): Srl.Possible[Int] {
            if this.db~ptr != 0 return Rows.Query[this_type](this.db).delete(this)
            else return Srl.Possible[Int].failure(Rows.Errors.connectionMissing());
        }
    }

    def infixOperators: Map[String, String];
    infixOperators.{
        this(String("==")) = "=";
        this(String("!=")) = "!=";
        this(String(">")) = ">";
        this(String(">=")) = ">=";
        this(String("<")) = "<";
        this(String("<=")) = "<=";
        this(String("and")) = "&&";
        this(String("&&")) = "&&";
        this(String("or")) = "||";
        this(String("||")) = "&&";
    };

    func generateWhere (obj: ref[TiObject]): TioSrdRef {
        def result: TioSrdRef;
        def result2: TioSrdRef;
        def resultArray: Array[TioSrdRef];

        if obj~ptr == 0 {
            System.fail(1, "generateWhere: obj is null.\n");
        }

        if isDerivedFrom[obj, PrefixOperator] {
            def binding: ref[Binding](getInterface[obj, Binding]);
            def operator: String = castRef[binding.getMember("type"), TiStr].value;
            if operator != "not" and operator != "!" {
                Spp.buildMgr.raiseBuildNotice("SPPG1002", 1, obj);
            }
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            if !Spp.astMgr.buildAst(
                ast { Srl.String("NOT ") + (cond) },
                Map[String, ref[TiObject]]()
                    .set(String("cond"), generateWhere(mapContaining.getElement(0)).obj),
                result2
            ) {
                System.fail(1, "Unexpected error while processing PrefixOperator in generateWhere.\n");
            }
            return result2
        } else if isDerivedFrom[obj, ComparisonOperator] or isDerivedFrom[obj, AssignmentOperator] {
            def binding: ref[Binding](getInterface[obj, Binding]);
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            def operator: String = castRef[binding.getMember("type"), TiStr].value;
            if infixOperators(operator) == "" {
                Spp.buildMgr.raiseBuildNotice("SPPG1002", 1, obj);
            } else {
                operator = infixOperators(operator);
            }
            if operator == "=" {
                if !Spp.astMgr.buildAst(
                    ast {
                        Srl.String("\"") + Rows.escapeString(_this.getColumnNameForVar(Srl.String("{{name}}"))) + "\"" +
                        Srl.String().{
                            def v: Rows.Value(_this.validationBuffer.name~use_in(_buffer) no_injection { _buffer = val })
                            if v.valueType == Value.Type.NULL this = " is null"
                            else this = String(" = ") + v.toString();
                        }
                    },
                    Map[String, ref[TiObject]]()
                        .set(String("name"), mapContaining.getElement("first"))
                        .set(String("val"), mapContaining.getElement("second")),
                    result
                ) {
                    System.fail(1, "Unexpected error while processing InfixOperator in generateWhere.\n");
                }
            } else if operator == "!=" {
                if !Spp.astMgr.buildAst(
                    ast {
                        Srl.String("\"") + Rows.escapeString(_this.getColumnNameForVar(Srl.String("{{name}}"))) + "\"" +
                        Srl.String().{
                            def v: Rows.Value(_this.validationBuffer.name~use_in(_buffer) no_injection { _buffer = val })
                            if v.valueType == Value.Type.NULL this = " is not null"
                            else this = String(" != ") + v.toString();
                        }
                    },
                    Map[String, ref[TiObject]]()
                        .set(String("name"), mapContaining.getElement("first"))
                        .set(String("val"), mapContaining.getElement("second")),
                    result
                ) {
                    System.fail(1, "Unexpected error while processing InfixOperator in generateWhere.\n");
                }
            } else {
                if !Spp.astMgr.buildAst(
                    ast {
                        Srl.String("\"") + Rows.escapeString(_this.getColumnNameForVar(Srl.String("{{name}}"))) + "\"" +
                        Srl.String(" {{op}} ") +
                        Rows.Value(_this.validationBuffer.name~use_in(_buffer) no_injection { _buffer = val }).toString()
                    },
                    Map[String, ref[TiObject]]()
                        .set(String("name"), mapContaining.getElement("first"))
                        .set(String("op"), TiStr(operator))
                        .set(String("val"), mapContaining.getElement("second")),
                    result
                ) {
                    System.fail(1, "Unexpected error while processing InfixOperator in generateWhere.\n");
                }
            }
        } else if isDerivedFrom[obj, LogOperator] {
            def binding: ref[Binding](getInterface[obj, Binding]);
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            if !Spp.astMgr.buildAst(
                ast { (cond1) + Srl.String(" {{op}} ") + (cond2) },
                Map[String, ref[TiObject]]()
                    .set(String("cond1"), generateWhere(mapContaining.getElement("first")).obj)
                    .set(String("op"), binding.getMember("type"))
                    .set(String("cond2"), generateWhere(mapContaining.getElement("second")).obj),
                result
            ) {
                System.fail(1, "Unexpected error while processing LogOperator in generateWhere.\n");
            }
        } else if isDerivedFrom[obj, Bracket] {
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            if !Spp.astMgr.buildAst(
                ast { Srl.String("(") + (cond) + Srl.String(")") },
                Map[String, ref[TiObject]]()
                   .set(String("cond"), generateWhere(mapContaining.getElement("operand")).obj),
                result
            ) {
                System.fail(1, "Unexpected error while processing Bracket in generateWhere.\n");
            }
        } else if isDerivedFrom[obj, LinkOperator] {
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            def binding: ref[Binding](getInterface[obj, Binding]);
            def mapContaining2: ref[MapContaining](getInterface[mapContaining.getElement("second"), MapContaining]);
            def containing: ref[Containing](getInterface[mapContaining2.getElement("operand"), Containing]);
            def i: int =0;

            if !Spp.astMgr.buildAst(
                ast {
                    Srl.String("\"") + Rows.escapeString(_this.getColumnNameForVar(Srl.String("{{name}}"))) + "\"" +
                    Srl.String(" in (")
                },
                Map[String, ref[TiObject]]().set(String("name"), mapContaining.getElement("first")),
                result2
            ) {
                System.fail(1, "Unexpected error while processing LinkOperator in generateWhere.\n");
            }

            resultArray.add(result2);
            for i=0 , i < containing.getElementCount()~cast[Int]-1 , i = i+1 {
                if !Spp.astMgr.buildAst(
                    ast {
                        result + (
                            Rows.Value(
                                _this.validationBuffer.name~use_in(_buffer) no_injection { _buffer = val }
                            ).toString() +
                            Srl.String(" , ")
                        )
                    },
                    Map[String, ref[TiObject]]()
                        .set(String("name"), mapContaining.getElement("first"))
                        .set(String("val"), containing.getElement(i))
                        .set(String("result"), resultArray(i)),
                    result2
                ) {
                    System.fail(1, "Unexpected error while processing LinkOperator in generateWhere.\n");
                }
                resultArray.add(result2);
            }
            if !Spp.astMgr.buildAst(
                ast {
                    result + (
                        Rows.Value(
                            _this.validationBuffer.name~use_in(_buffer) no_injection { _buffer = val }
                        ).toString() +
                        Srl.String(")")
                    )
                },
                Map[String, ref[TiObject]]()
                    .set(String("name"), mapContaining.getElement("first"))
                    .set(String("val"), containing.getElement(containing.getElementCount()~cast[Int]-1))
                    .set(String("result"), resultArray(resultArray.getLength()-1)),
                result
            ) {
                System.fail(1, "Unexpected error while processing LinkOperator in generateWhere.\n");
            }
        } else {
            Spp.buildMgr.raiseBuildNotice("SPPG1002", 1, obj);
            if !Spp.astMgr.buildAst(
                ast { Srl.String("") },
                Map[String, ref[TiObject]](),
                result
            ) {
                System.fail(1, "Failed to build condition.\n");
            }
        }
        return result;
    }

    func generateOrder (obj: ref[TiObject]): TioSrdRef {
        def result: TioSrdRef;

        if obj~ptr == 0 {
            System.fail(1, "generateOrder: obj is null.\n");
        }
        if isDerivedFrom[obj, Identifier] {
            if !Spp.astMgr.buildAst(
                ast {
                    this.ordering.add(this.getColumnNameForVar(Srl.String("{{column}}")));
                    this.validationBuffer.column;
                },
                Map[String, ref[TiObject]]().set(String("column"), obj),
                result
            ) {
                System.fail(1, "Unexpected error while processing Identifier in generateOrder.\n");
            }
        } else if isDerivedFrom[obj, PrefixOperator] {
            def binding: ref[Binding](getInterface[obj, Binding]);
            def operator: String = castRef[binding.getMember("type"), TiStr].value;
            if operator != "-" {
                Spp.buildMgr.raiseBuildNotice("SPPG1002", 1, obj);
            }
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            obj~no_deref = mapContaining.getElement(0);
            if !isDerivedFrom[obj, Identifier] {
                Spp.buildMgr.raiseBuildNotice("SPPG1002", 1, obj);
            }
            if !Spp.astMgr.buildAst(
                ast {
                    this.ordering.add(Srl.String("-") + this.getColumnNameForVar(Srl.String("{{column}}")));
                    this.validationBuffer.column;
                },
                Map[String, ref[TiObject]]().set(String("column"), obj),
                result
            ) {
                System.fail(1, "Unexpected error while processing PrefixOperator in generateOrder.\n");
            }
        } else if isDerivedFrom[obj, Bracket] {
            def mapContainer: MapContainerOf[obj];
            result = generateOrder(mapContainer.getElement("operand"));
        } else if isDerivedFrom[obj, Core.Data.Ast.List] {
            def container: ContainerOf[obj];
            result = generateOrder(container.getElement(0));
            def i: Int;
            for i = 1, i < container.getElementCount()~cast[Int], ++i {
                def combinedResult: TioSrdRef;
                if !Spp.astMgr.buildAst(
                    ast { prevResult; result; },
                    Map[String, ref[TiObject]]()
                        .set(String("prevResult"), result)
                        .set(String("result"), generateOrder(container.getElement(i))),
                    combinedResult
                ) {
                    System.fail(1, "Unexpected error while processing List in generateOrder.\n");
                }
                result = combinedResult;
            }
        } else {
            Spp.buildMgr.raiseBuildNotice("SPPG1002", 1, obj);
            if !Spp.astMgr.buildAst(
                ast { },
                Map[String, ref[TiObject]](),
                result
            ) {
                System.fail(1, "Unexpected error in generateOrder.\n");
            }
        }
        return result;
    }

    func generateUpdate (obj: ref[TiObject]): TioSrdRef {
        def result: TioSrdRef;

        if obj~ptr == 0 {
            System.fail(1, "generateUpdate: obj is null.\n");
        }
        if isDerivedFrom[obj, AssignmentOperator] {
            def binding: ref[Binding](getInterface[obj, Binding]);
            def opType: String = castRef[binding.getMember("type"), Core.Basic.TiStr].value;
            if opType == "=" {
                def mapContainer: MapContainerOf[obj];
                if !Spp.astMgr.buildAst(
                    ast {
                        columns.add(_this.getColumnNameForVar(Srl.String("{{name}}")));
                        _this.validationBuffer.name = val;
                        data.add(Rows.Value(_this.validationBuffer.name));
                    },
                    Map[String, ref[TiObject]]()
                        .set(String("name"), mapContainer.getElement("first"))
                        .set(String("val"), mapContainer.getElement("second")),
                    result
                ) {
                    System.fail(1, "Unexpected error while processing AssignmentOperator in generateUpdate.\n");
                }
            } else {
                Spp.buildMgr.raiseBuildNotice("SPPG1002", 1, obj);
                if !Spp.astMgr.buildAst(ast { }, Map[String, ref[TiObject]](), result) {
                    System.fail(1, "Unexpected error while processing AssignmentOperator in generateUpdate.\n");
                }
            }
        } else if isDerivedFrom[obj, Bracket] {
            def mapContainer: MapContainerOf[obj];
            result = generateUpdate(mapContainer.getElement("operand"));
        } else if isDerivedFrom[obj, Core.Data.Ast.List] {
            def container: ContainerOf[obj];
            result = generateUpdate(container.getElement(0));
            def i: Int;
            for i = 1, i < container.getElementCount()~cast[Int], ++i {
                def combinedResult: TioSrdRef;
                if !Spp.astMgr.buildAst(
                    ast { prevResult; result; },
                    Map[String, ref[TiObject]]()
                        .set(String("prevResult"), result)
                        .set(String("result"), generateUpdate(container.getElement(i))),
                    combinedResult
                ) {
                    System.fail(1, "Unexpected error while processing List in generateUpdate.\n");
                }
                result = combinedResult;
            }
        } else {
            Spp.buildMgr.raiseBuildNotice("SPPG1002", 1, obj);
            if !Spp.astMgr.buildAst(ast { }, Map[String, ref[TiObject]](), result) {
                System.fail(1, "Unexpected error in generateUpdate.\n");
            }
        }
        return result;
    }

    func generateParsing (varNames: Array[String], varElements: Array[ref[Core.Basic.TiObject]]) {
        @shared def strType: ref[Spp.Ast.Type](Spp.astMgr.traceType(ast Root.Srl.String));
        @shared def nullableStrType: ref[Spp.Ast.Type](Spp.astMgr.traceType(ast Root.Srl.Nullable[Root.Srl.String]));
        @shared def boolType: ref[Spp.Ast.Type](Spp.astMgr.traceType(ast Root.Bool));
        @shared def nullableBoolType: ref[Spp.Ast.Type](Spp.astMgr.traceType(ast Root.Srl.Nullable[Root.Bool]));
        @shared def nullableInt32Type: ref[Spp.Ast.Type](Spp.astMgr.traceType(ast Root.Srl.Nullable[Root.Int[32]]));
        @shared def nullableInt64Type: ref[Spp.Ast.Type](Spp.astMgr.traceType(ast Root.Srl.Nullable[Root.Int[64]]));
        @shared def nullableFloat32Type: ref[Spp.Ast.Type](Spp.astMgr.traceType(ast Root.Srl.Nullable[Root.Float[32]]));
        @shared def nullableFloat64Type: ref[Spp.Ast.Type](Spp.astMgr.traceType(ast Root.Srl.Nullable[Root.Float[64]]));

        macro generateParseBlock[valType] generateParseBlock[valType, String];
        macro generateParseBlock[valType, parser] {
            if !Spp.astMgr.insertAst(
                (ast model.varName = valType().{
                    if not data(j).isNull this = parser(data(j))
                }),
                Map[String, ref[TiObject]]()
                    .set(String("j"), Core.Data.Ast.IntegerLiteral(String("") + i))
                    .set(String("varName"), Core.Data.Ast.Identifier(varNames(i)))
            ) {
                System.fail(1, "Unexpected error while processing generateParsing.\n");
            }
        }

        def i: Int;
        for i = 0, i < varElements.getLength(), i = i+1 {
            def varType: ref[Spp.Ast.Type](Spp.astMgr.traceType(varElements(i)));
            if varType~ptr == strType~ptr {
                generateParseBlock[Srl.String];
            } else if varType~ptr == nullableStrType~ptr {
                generateParseBlock[Srl.Nullable[Srl.String]];
            } else if varType~ptr == boolType~ptr {
                generateParseBlock[Root.Bool, Rows.parseBool];
            } else if varType~ptr == nullableBoolType~ptr {
                generateParseBlock[Srl.Nullable[Root.Bool], Rows.parseBool];
            } else if varType.getMyTypeInfo().typeName == "IntegerType" {
                generateParseBlock[Root.Int[64], Rows.parseInt];
            } else if varType~ptr == nullableInt32Type~ptr {
                generateParseBlock[Srl.Nullable[Root.Int[32]], Rows.parseInt];
            } else if varType~ptr == nullableInt64Type~ptr {
                generateParseBlock[Srl.Nullable[Root.Int[64]], Rows.parseInt];
            } else if varType.getMyTypeInfo().typeName == "FloatType" {
                generateParseBlock[Root.Float[64], Rows.parseFloat];
            } else if varType~ptr == nullableFloat32Type~ptr {
                generateParseBlock[Srl.Nullable[Root.Float[32]], Rows.parseFloat];
            } else if varType~ptr == nullableFloat64Type~ptr {
                generateParseBlock[Srl.Nullable[Root.Float[64]], Rows.parseFloat];
            } else {
                Spp.buildMgr.raiseBuildNotice("ROWS1002", 1, varElements(i));
            }
        }
    }

    func generateGetData (varArray: Array[String]) {
        def i: Int;
        for i = 0, i < varArray.getLength(), i = i+1 {
            if !Spp.astMgr.insertAst(
                (ast data.add(Rows.Value(model.varName))),
                Map[String, ref[TiObject]]().set(String("varName"), Core.Data.Ast.Identifier(varArray(i)))
            ) {
                System.fail(1, "Unexpected error while processing generateGetData.\n");
            }
        }
    }

    func generateTableName (classAst: ref[Core.Basic.TiObject]) {
        Spp.astMgr.insertAst(
            (ast Srl.String("{{className}}")),
            Srl.Map[Srl.String, ref[Core.Basic.TiObject]]().set(Srl.String("className"), TiStr(getTableName(classAst)))
        );
    }
}
