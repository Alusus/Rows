@merge module Rows {
    class Receive {
        def execString: String;
        def conditionString: String;
        def dataFieldsString: String = "*";
        def tableName: String;
        def orderByString: String;
        def havingString: String;
        def data: Array[Array[String]];
        def columnNames : Array[String];
        def dataBaseType: int = 0;
        def mysqlObj: MySql.Db ;
        // TODO: Enable other DB types.
        // def pgsqlObj: PostgreSql.Db;
        // def SqliteObj: Sqlite.Db;

        handler this.setConditionString(cond: String) {
            this.conditionString = "";
            if cond != "" {
                this.conditionString = "WHERE ";
                this.conditionString = this.conditionString + cond;
            }
        }

        handler this.getConditionString(): String {
            return this.conditionString;
        }

        handler this.setDataFieldsString(dataFileds: Array[String]) {
            this.dataFieldsString = "*";
            if dataFileds.getLength() != 0 {
                def i: int;
                this.dataFieldsString = "( ";
                for i = 0, i < dataFileds.getLength(), i = i + 1
                    this.dataFieldsString += String(" , ") + dataFileds(i);
            }
        }

        handler this.getDataFieldsString(): String {
            return this.dataFieldsString;
        }

        handler this.setTableName(tableNames: Array[String]) {
            this.tableName = "";
            def i: int;
            if tableNames.getLength() == 1 {
                this.tableName=tableNames(0);
            } else if tableNames.getLength() == 0 {
                this.tableName = "";
            } else {
                this.tableName = "(";
                this.tableName = this.tableName + tableNames(0);
                for i = 1, i < tableNames.getLength(), i = i + 1 {
                    this.tableName = this.tableName + " , " + tableNames(i);
                }
                this.tableName = this.tableName + ")";
            }
        }

        handler this.getTableName(): String {
            return this.tableName;
        }

        handler this.setOrderByString(tableNames: Array[String]) {
            this.orderByString = "";
            def i: int;
            if tableNames.getLength() == 1 {
                this.orderByString=tableNames(0);
            } else if tableNames.getLength() == 0 {
                this.orderByString = "";
            } else {
                this.orderByString = "(";
                this.orderByString = this.orderByString + tableNames(0);
                for i = 1, i < tableNames.getLength(), i = i + 1 {
                    this.orderByString += String(" , ") + tableNames(i);
                }
                this.orderByString += ")";
            }
        }

        handler this.getOrderByString(): String {
            return this.orderByString;
        }

        handler this.setHavingString(cond: String) {
            this.havingString = "";
            if cond.getLength() != 0 {
                this.havingString = "HAVING ( ";
                this.havingString = this.havingString + cond + " )";
            }
        }

        handler this.getHavingString(): String {
            return this.havingString;
        }

        handler this.generateExecString() {
            this.execString = "SELECT ";
            this.execString += this.dataFieldsString + "\n";
            this.execString += String("FROM ") + this.tableName + "\n";
            if this.conditionString != "" {
                this.execString += this.conditionString + "\n";
            }
            if this.orderByString != "" {
                this.execString += this.orderByString + "\n";
            }
            if this.havingString != "" {
                this.execString += this.havingString + "\n";
            }
        }

        handler this.getExecString(): String {
            return this.execString;
        }

        handler this.setMysqlObj(mysqlObj: MySql.Db) {
            this.mysqlObj = mysqlObj;
        }

        handler this.setDataBaseType(dataBaseType: int) {
            this.dataBaseType = dataBaseType;
        }

        handler this.getDataBaseType(): int {
            return this.dataBaseType;
        }

        handler this.setData() {
            if this.dataBaseType ==0 {
                if this.mysqlObj.conn == null {
		            Console.print(" %s \n", this.mysqlObj.conState);
                } else {
                    this.mysqlObj.exec(this.execString.buf);
                    if this.mysqlObj.resultState != 0 {
		                Console.print(" %s \n",this.mysqlObj.errorMessage() );
	                }
	                if this.mysqlObj.res == null {
		                Console.print("  %s \n",this.mysqlObj.errorMessage() );
	                } else {
                        def numberOfFileds: int;
                        numberOfFileds = this.mysqlObj.getFiledsNumber();
                        this.mysqlObj.getRow();
                        this.mysqlObj.getCol();
                        def i: int;
                        while this.mysqlObj.row != null {
                            def rowData: Array[String];
                            for i = 0, i < numberOfFileds, i = i + 1 {
                                rowData.add(String(this.mysqlObj.row~cnt(i)));
                            }
                            this.data.add(rowData);
                            this.mysqlObj.getRow();
                        }
                    }
                }
            }
        }

        handler this.getData(): Array[Array[String]] {
            return this.data;
        }
    }
}

