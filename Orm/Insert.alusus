@merge module Rows {
    class Insert {
        def execString: String = "INSERT INTO ";
        def tableName: String = "";
        def data: Array[String];
        def columnNames: Array[String];
        def colsString: String = "";
        def valString: String = "";
        def dbType: int;
        def pgsqlObj: PostgreSql.Db;
        def mysqlObj: MySql.Db ;
        // TODO: Implement Sqlite.
        // def SqliteObj : Sqlite.Db;

        handler this.setTableName(tableName: String) {
            this.tableName = tableName;
        }

        handler this.setData(data: Array[String]) {
            this.data = data;
        }

        handler this.getData(): Array[String] {
            return this.data;
        }

        handler this.setMysqlObj(mysqlObj: MySql.Db) {
            this.mysqlObj = mysqlObj;
            this.dbType = 0;
        }

        handler this.getMysqlObj(): MySql.Db {
            return this.mysqlObj;
        }

        handler this.setPgsqlObj(pgsqlObj: PostgreSql.Db) {
            this.pgsqlObj = pgsqlObj;
        }

        handler this.getPgsqlObj(): PostgreSql.Db {
            return this.pgsqlObj;
        }

        // TODO: Uncomment once Sqlite is implemented.
        /* handler this.setSqliteObj(SqliteObj : Sqlite.Db)
        {
            this.SqliteObj=SqliteObj;
        }
        handler this.getSqliteObj() : Sqlite.Db
        {
            return this.SqliteObj;
        } */

        handler this.getColsString(): String {
            return this.colsString;
        }

        handler this.setColsString(colsString: String) {
             this.colsString = colsString;
        }

        handler this.setColumnNames(columnNames: Array[String]) {
            this.columnNames = columnNames;
        }

        handler this.getColumnNames(): Array[String] {
            return this.columnNames;
        }

        handler this.genrateColsString() {
            this.colsString = "( ";
            def i: int = 0;
            def size: int = 0;
            if this.data.getLength() < this.columnNames.getLength() size=this.data.getLength()
            else size = this.columnNames.getLength();
            for i = 0, i < size - 1, i = i + 1 {
                this.colsString = this.colsString + this.columnNames(i) + ",";
            }
            this.colsString=this.colsString+this.columnNames(size-1) ;
            this.colsString=this.colsString + ")";
        }

        handler this.getColsString(): String {
            return this.colsString;
        }

        handler this.generateValString() {
            this.valString = "( ";
            def i: int = 0;
            def size: int = 0;
            if this.data.getLength() < this.columnNames.getLength() size = this.data.getLength()
            else size = this.columnNames.getLength();
            for i = 0, i < size - 1, i = i + 1 {
                this.valString = this.valString + this.data(i) + ", ";
            }
            this.valString = this.valString + this.data(size-1);
            this.valString = this.valString + ")";
        }

        handler this.generateExecString() {
            this.execString = "INSERT INTO";
            this.execString = this.execString + " " + this.tableName + "\n";
            this.execString = this.execString + this.colsString + "\n";
            this.execString = this.execString + "VALUES ";
            this.execString = this.execString + this.valString + "\n";
        }

        handler this.getExecString(): String {
            return this.execString;
        }

        handler this.exec() {
            if this.dbType == 1 {
                Console.print("\n");
                this.pgsqlObj.connectDb();
                this.pgsqlObj.exec(this.execString.buf);
                Console.print(this.pgsqlObj.errorMessage());
            } else if this.dbType == 0 {
                Console.print(this.execString.buf);
                Console.print("\n");
                if this.mysqlObj.conn == null {
                    Console.print("after conn %s \n",this.mysqlObj.errorMessage());
                } else {
                    this.mysqlObj.exec(this.execString.buf);
                }
                Console.print(this.mysqlObj.errorMessage());
                Console.print("\n");
            }
        }
    }
}

