@merge module Rows {
    class DbConBuilder {
        def dbName: String = "";
        def userName: String = "";
        def password: String = "";
        def server: String = "";
        def port: int = 0;
        def unixSocket: String = null;
        def clientFlags: int = 0;
        def dbConType: int;

        def DbType: {
            def MYSQL: 0;
            def SQLITE: 1;
            def PGSQL: 2;
        }

        handler this~init() {}

        handler this~init(dbName: String, userName: String, password: String, server: String) {
            this.dbName = dbName;
            this.userName = userName;
            this.password = password;
            this.server = server
        }

        handler this~init(ref[DbConBuilder]) {
            this.dbName = value.dbName;
            this.userName = value.userName;
            this.password = value.password;
            this.server = value.server;
            this.port = value.port;
            this.unixSocket = null;
            this.clientFlags = value.clientFlags;
            this.dbConType = value.dbConType;
        }

        handler this = ref[DbConBuilder] {
            this.dbName = value.dbName;
            this.userName = value.userName;
            this.password = value.password;
            this.server = value.server;
            this.port = value.port;
            this.unixSocket = null;
            this.clientFlags = value.clientFlags;
            this.dbConType = value.dbConType;
        }

        handler this.setDBName(dbName: String) {
            this.dbName = dbName;
        }

        handler this.getDbName(): String {
            return this.dbName;
        }

        handler this.setDbConType(dbConType: int) {
            this.dbConType = dbConType;
        }

        handler this.getDbConType(): int {
            return this.dbConType;
        }

        handler this.setUserName(userName: String) {
            this.userName = userName;
        }

        handler this.getUserName(): String {
            return this.userName;
        }

        handler this.setPassword(password: String) {
            this.password = password;
        }

        handler this.getPassword(): String {
            return this.password;
        }

        handler this.setServer(server: String) {
            this.server = server;
        }

        handler this.getServer(): String {
            return this.server;
        }

        handler this.setPort(port: int) {
            this.port = port;
        }

        handler this.getPort(): int {
            return this.port;
        }

        handler this.setUnixSocket(unixSocket: String) {
            this.unixSocket = unixSocket;
        }

        handler this.getUnixSocket(): String {
            return this.unixSocket;
        }

        handler this.setClientFlags(clientFlags: int) {
            this.clientFlags = clientFlags;
        }

        handler this.getClientFlags(): int {
            return this.clientFlags;
        }

        handler this.pgSqlConStringBuilder(): String {
            def pgsqlString: String = "user = ";
            pgsqlString = pgsqlString + this.userName + " password = " + this.password + " dbname = " + this.dbName;
            return pgsqlString;
        }

        handler this.pgSqlConBuilder(): PostgreSql.Db {
            def pgsqlString: String ;
            pgsqlString = this.pgSqlConStringBuilder();
            def PgSql: PostgreSql.Db(pgsqlString);
            return PgSql;
        }

        handler this.mySqlConBuilder(): MySql.Db {
            def MySql: MySql.Db(
                this.server, this.userName, this.password, this.dbName, this.port, this.unixSocket, this.clientFlags
            );

            return MySql;
        }

        handler this.sqLiteConBuilder(): Sqlite.Db {
            def sqlite: Sqlite.Db = this.dbName;
            return sqlite;
        }
    }
}

