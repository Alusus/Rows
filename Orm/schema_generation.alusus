@merge module Rows {
    func generateTable (classAst: ref[Core.Basic.TiObject]): TioSrdRef {
        use Core.Basic;
        def result: TioSrdRef;
        def columnResult: TioSrdRef;
        def columnResults: Spp.Ast.Block;
        def columnResultsContainer: DynContainerOf[columnResults];
        def pkResults: Core.Data.Ast.List;
        def pkResultsContainer: DynContainerOf[pkResults];
        def fkResults: Spp.Ast.Block;
        def fkResultsContainer: DynContainerOf[fkResults];

        def vars: Array[ref[Core.Basic.TiObject]] = getVars(classAst, 0);

        def i: int;
        def j: int;

        for i = 0, i < vars.getLength(), i += 1 {
            def modsKeywords: Array[String];
            def modsParams: Array[Array[String]];
            getVarModifiers(vars(i), modsKeywords, modsParams);

            def dataTypeName: String;
            for j = 0, j < modsKeywords.getLength(), j += 1 {
                if isDataType(modsKeywords(j)) != -1 {
                    dataTypeName = modsKeywords(j);
                    break;
                }
            }

            if dataTypeName == "" continue;

            def columnName: String = getColumnName(vars(i));

            if modsParams(j).getLength() == 0 {
                if !Spp.astMgr.buildAst(
                    (ast dataType = Rows.dataTypeName()),
                    Map[String, ref[TiObject]]().set(String("dataTypeName"), Core.Data.Ast.Identifier(dataTypeName)),
                    columnResult
                ) {
                    System.fail(1, "Unexpected error while processing data type in generateTable.\n");
                }
            } else {
                if !Spp.astMgr.buildAst(
                    (ast dataType = Rows.dataTypeName(size)),
                    Map[String, ref[TiObject]]()
                        .set(String("dataTypeName"), Core.Data.Ast.Identifier(dataTypeName))
                        .set(String("size"), Core.Data.Ast.IntegerLiteral(modsParams(j)(0))),
                    columnResult
                ) {
                    System.fail(1, "Unexpected error while processing data type in generateTable.\n");
                }
            }

            for j = 0, j < modsKeywords.getLength(), j += 1 {
                if modsKeywords(j) == "notNull" {
                    if !Spp.astMgr.buildAst(
                        ast {
                            prevResult;
                            notNull = true;
                        },
                        Map[String, ref[TiObject]]().set(String("prevResult"), columnResult),
                        result
                    ) {
                        System.fail(1, "Unexpected error while processing not-null in generateTable.\n");
                    }
                    columnResult = result;
                } else if modsKeywords(j) == "unique" {
                    if !Spp.astMgr.buildAst(
                        ast {
                            prevResult;
                            unique = true;
                        },
                        Map[String, ref[TiObject]]().set(String("prevResult"), columnResult),
                        result
                    ) {
                        System.fail(1, "Unexpected error while processing unique in generateTable.\n");
                    }
                    columnResult = result;
                } else if modsKeywords(j) == "primaryKey" {
                    if !Spp.astMgr.buildAst(
                        (ast Srl.String("{{varname}}")),
                        Map[String, ref[TiObject]]().set(String("varname"), Core.Data.Ast.Identifier(columnName)),
                        result
                    ) {
                        System.fail(1, "Unexpected error while processing primary-key in generateTable.\n");
                    }
                    pkResultsContainer.addElement(result);
                } else if modsKeywords(j) == "defult" {
                    if modsParams(j).getLength() == 0 {
                        Spp.buildMgr.raiseBuildNotice("ROWS1003", 1, vars(i));
                        continue;
                    }
                    if !Spp.astMgr.buildAst(
                        ast {
                            prevResult;
                            default = Srl.String("{{param}}");
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("prevResult"), columnResult)
                            .set(String("param"), Core.Data.Ast.Identifier(modsParams(j)(0))),
                        result
                    ) {
                        System.fail(1, "Unexpected error while processing default in generateTable.\n");
                    }
                    columnResult = result;
                } else if modsKeywords(j) == "check" {
                    if modsParams(j).getLength() == 0 {
                        Spp.buildMgr.raiseBuildNotice("ROWS1004", 1, vars(i));
                        continue;
                    }
                    if !Spp.astMgr.buildAst(
                        ast {
                            prevResult;
                            _check = Srl.String("{{param}}");
                        },
                        Map[String, ref[TiObject]]()
                            .set(String("prevResult"), columnResult)
                            .set(String("param"), Core.Data.Ast.Identifier(modsParams(j)(0))),
                        result
                    ) {
                        System.fail(1, "Unexpected error while processing check in generateTable.\n");
                    }
                    columnResult = result;
                } else if modsKeywords(j) == "foreignKey" {
                    if modsParams(j).getLength() < 2 {
                        Spp.buildMgr.raiseBuildNotice("ROWS1005", 1, vars(i));
                        continue;
                    }
                    def fkResult: TioSrdRef;
                    if !Spp.astMgr.buildAst(
                        (ast Rows.ForeignKey(
                            Srl.String("{{col}}"),
                            Srl.String("{{refTbl}}"),
                            Srl.String("{{refCol}}")
                        )),
                        Map[String, ref[TiObject]]()
                            .set(String("col"), Core.Data.Ast.Identifier(columnName))
                            .set(String("refTbl"), Core.Data.Ast.Identifier(modsParams(j)(0)))
                            .set(String("refCol"), Core.Data.Ast.Identifier(modsParams(j)(1))),
                        fkResult
                    ) {
                        System.fail(1, "Unexpected error while processing foreign-key in generateTable.\n");
                    }
                    fkResultsContainer.addElement(fkResult);
                }
            }

            if !Spp.astMgr.buildAst(
                (ast set(Srl.String("{{varName}}"), Rows.Column().{ columnDesc })),
                Map[String, ref[TiObject]]()
                    .set(String("varName"), TiStr(columnName))
                    .set(String("columnDesc"), columnResult),
                result
            ) {
                System.fail(1, "Unexpected error while processing column definition in generateTable.\n");
            }
            columnResultsContainer.addElement(result);
        }

        if !Spp.astMgr.buildAst(
            (ast Rows.CreateTable().{
                name = Srl.String("{{tableName}}");
                notExists = true;
                columns = Srl.Map[Srl.String, Srl.SrdRef[Rows.Column]]().columnDefs;
                primaryKey = Srl.Array[Srl.String]({ pkColumns });
                foreignKeys = Srl.Array[Srl.SrdRef[Rows.ForeignKey]](fkDefs);
            }),
            Map[String, ref[TiObject]]()
                .set(String("tableName"), Core.Data.Ast.Identifier(getTableName(classAst)))
                .set(String("columnDefs"), columnResults)
                .set(String("pkColumns"), pkResults)
                .set(String("fkDefs"), fkResults),
            result
        ) {
            System.fail(1, "Unexpected error while processing table definition in generateTable.\n");
        }
        return result;
    }

    function isDataType (varType : String): int {
        @shared def dataTypeArray:Array[String]({
            String("Integer"),
            String("BigInteger"),
            String("SmallInteger"),
            String("TinyInteger"),
            String("Real"),
            String("Float"),
            String("Decimal"),
            String("Xml"),
            String("VarChar"),
            String("CharType"),
            String("Text"),
            String("Date"),
	    String("Uuid")
        });

        def si : int ;
        for si = 0, si < dataTypeArray.getLength(), ++si {
            if dataTypeArray(si) == varType {
                return si;
            }
        }
        return -1;
    }
}

