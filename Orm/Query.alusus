@merge module Rows {
    class Query [Model: type] {
        def db: ref[Db];
        def validationBuffer: Model;
        def where: String;

        handler this~init(db: ref[Db]) {
            this.db~no_deref = db;
        }

        handler this~init(value: ref[this_type]) {
            this.db~no_deref = value.db;
            this.where = value.where;
        }

        func getColumnNames (): Array[String] {
            @shared def names: Array[String]({
                preprocess { generateColumnNames(Model~ast, "column") }
            });
            return names;
        }

        func getColumnVarNames (): Array[String] {
            @shared def names: Array[String]({
                preprocess { generateVarNames(Model~ast, "column") }
            });
            return names;
        }

        handler this.getColumnNameForVar(varName: String): String {
            def map: Map[String, String];
            map.keys = getColumnVarNames();
            map.values = getColumnNames();
            return map(varName);
        }

        func getPrimaryColumnNames (): Array[String] {
            return Array[String]({
                preprocess { generateColumnNames(Model~ast, "primaryKey") }
            });
        }

        func getPrimaryColumnVarNames (): Array[String] {
            return Array[String]({
                preprocess { generateVarNames(Model~ast, "primaryKey") }
            });
        }

        func parseRecord (data: Array[String]): SrdRef[Model] {
            def model: SrdRef[Model];
            model.construct();
            preprocess {
                generateParsing(
                    getColumnVarNames(),
                    getVarTypes(Model~ast, "column")
                );
            }
            return model;
        }

        func getRecordData [colummnNameGetter: function = getColumnVarNames] (model: ref[Model]): Array[String] {
            def data: Array[String];
            preprocess {
                generateGetData(colummnNameGetter());
            }
            return data;
        }

        handler this.getTableName(): String {
            return preprocess { generateTableName(Model~ast) };
        }

        handler this.setWhereForPrimaryKey(model: ref[Model]) {
            def columns: Array[String] = getPrimaryColumnNames();
            def data: Array[String] = getRecordData[getPrimaryColumnVarNames](model);
            this.where = columns(0) + " = '" + data(0) + "'";
            def i: Int;
            for i = 0, i < columns.getLength(), ++i {
                this.where += " AND ";
                this.where = columns(i) + " = '" + data(i) + "'";
            }
        }

        @member macro where [this, condition] {
            this~use_in(_this) no_injection {
                _this.where = preprocess {
                    if !Spp.astMgr.insertAst(
                        generateWhere(ast condition).obj
                    ) {
                        System.fail(1, "Failed to insert condition.\n");
                    }
                }
            }
        }

        @member macro update [this, expression] {
            this~use_in(_this) no_injection {
                def data: Array[String];
                def columns: Array[String];
                preprocess {
                    if !Spp.astMgr.insertAst(
                        generateUpdate(ast expression).obj
                    ) {
                        System.fail(1, "Failed to insert update statements.\n");
                    }
                }
                if !_this.db.exec(Update()~use_in(update) no_injection {
                    update.table = _this.getTableName();
                    update.columns = columns;
                    update.data = data;
                    update.condition = this.where;
                }) {
                    // TODO: Handle error case.
                }
            }
        }

        handler this.select(): Array[SrdRef[Model]] {
            def data : Array[Array[String]];
            if !this.db.exec(Select()~use_in(select) {
                table = this.getTableName();
                fields = getColumnNames();
                condition = this.where;
            }, data) {
                // TODO: Handle error case.
            }
            def models: Array[SrdRef[Model]];
            def i: int =0;
            for i = 0, i < data.getLength(), ++i {
                def model: SrdRef[Model] = parseRecord(data(i));
                model.db~no_deref = this.db;
                models.add(model);
            }
            return models;
        }

        handler this.save(model: ref[Model]) {
            if model.db~ptr == this.db~ptr {
                // Update an existing record.
                this.setWhereForPrimaryKey(model);
                if !this.db.exec(Update()~use_in(update) no_injection {
                    update.table = this.getTableName();
                    update.columns = getColumnNames();
                    update.data = getRecordData(model);
                    update.condition = this.where;
                }) {
                    // TODO: Handle error case.
                }
            } else {
                // Create a new record.
                if !this.db.exec(Insert()~use_in(insert) no_injection {
                    insert.table = this.getTableName();
                    insert.columns = getColumnNames();
                    insert.data = getRecordData(model);
                }) {
                    // TODO: Handle error case.
                }
                model.db~no_deref = this.db;
            }
        }

        handler this.delete(model: ref[Model]) {
            this.setWhereForPrimaryKey(model);
            this.delete();
            model.db~ptr = 0;
        }

        handler this.delete() {
            if !this.db.exec(Delete()~use_in(delete) {
                delete.table = this.getTableName();
                delete.condition = this.where;
            }) {
                // TODO: Handle error case.
            }
        }
    }
}

