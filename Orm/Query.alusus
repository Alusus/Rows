@merge module Rows {
    class Query [Model: type] {
        def db: ref[Db];
        def validationBuffer: Model;
        def where: String;
        def ordering: Array[String];

        handler this~init(db: ref[Db]) {
            this.db~no_deref = db;
        }

        handler this~init(value: ref[this_type]) {
            this.db~no_deref = value.db;
            this.where = value.where;
            this.ordering = value.ordering;
        }

        func getColumnNames (): Array[String] {
            @shared def names: Array[String]({
                preprocess { generateColumnNames(Model~ast, "column") }
            });
            return names;
        }

        func getColumnVarNames (): Array[String] {
            @shared def names: Array[String]({
                preprocess { generateVarNames(Model~ast, "column") }
            });
            return names;
        }

        handler this.getColumnNameForVar(varName: String): String {
            def map: Map[String, String];
            map.keys = getColumnVarNames();
            map.values = getColumnNames();
            return map(varName);
        }

        func getPrimaryColumnNames (): Array[String] {
            return Array[String]({
                preprocess { generateColumnNames(Model~ast, "primaryKey") }
            });
        }

        func getPrimaryColumnVarNames (): Array[String] {
            return Array[String]({
                preprocess { generateVarNames(Model~ast, "primaryKey") }
            });
        }

        func parseRecord (data: Array[String]): SrdRef[Model] {
            def model: SrdRef[Model];
            model.construct();
            preprocess {
                generateParsing(
                    getColumnVarNames(),
                    getVars(Model~ast, "column")
                );
            }
            return model;
        }

        func getRecordData [colummnNameGetter: function = getColumnVarNames] (model: ref[Model]): Array[String] {
            def data: Array[String];
            preprocess {
                generateGetData(colummnNameGetter());
            }
            return data;
        }

        handler this.getTableName(): String {
            return preprocess { generateTableName(Model~ast) };
        }

        handler this.setWhereForPrimaryKey(model: ref[Model]) {
            def columns: Array[String] = getPrimaryColumnNames();
            def data: Array[String] = getRecordData[getPrimaryColumnVarNames](model);
            this.where = String("\"") + escapeString(columns(0)) + "\" = '" + escapeString(data(0)) + "'";
            def i: Int;
            for i = 1, i < columns.getLength(), ++i {
                this.where += " AND \"";
                this.where += escapeString(columns(i)) + "\" = '" + escapeString(data(i)) + "'";
            }
        }

        handler [exp: ast] this.order:ref[this_type] {
            preprocess {
                if !Spp.astMgr.insertAst(
                    generateOrder(exp~ast).obj
                ) {
                    System.fail(1, "Failed to insert order list.\n");
                }
            }
            return this;
        }

        @member macro where [this, condition] {
            this~use_in(_this) no_injection {
                _this.where = preprocess {
                    if !Spp.astMgr.insertAst(
                        Rows.generateWhere(ast condition).obj
                    ) {
                        Srl.System.fail(1, "Failed to insert condition.\n");
                    }
                }
            }
        }

        @member macro update [this, expression] {
            Rows.Result()~use_in(_result) no_injection {
                this~use_in(_this) no_injection {
                    def data: Srl.Array[Srl.String];
                    def columns: Srl.Array[Srl.String];
                    preprocess {
                        if !Spp.astMgr.insertAst(
                            Rows.generateUpdate(ast expression).obj
                        ) {
                            Srl.System.fail(1, "Failed to insert update statements.\n");
                        }
                    }
                    _result = _this.db.exec(Rows.Update()~use_in(update) no_injection {
                        update.table = _this.getTableName();
                        update.columns = columns;
                        update.data = data;
                        update._condition = _this.where;
                    });
                }
            }
        }

        handler this.select(): Result[Array[SrdRef[Model]]] {
            def data : Array[Array[String]];
            this.db.exec(Select()~use_in(select) {
                table = this.getTableName();
                fields = getColumnNames();
                _condition = this.where;
                orderBy = this.ordering;
            })~use_in (res) no_injection {
                if !!res return Result[Array[SrdRef[Model]]].failure(res.error);
                data = res;
            }
            def models: Array[SrdRef[Model]];
            def i: int =0;
            for i = 0, i < data.getLength(), ++i {
                def model: SrdRef[Model] = parseRecord(data(i));
                model.db~no_deref = this.db;
                models.add(model);
            }
            return Result[Array[SrdRef[Model]]].success(models);
        }

        handler this.save(model: ref[Model]): Result {
            if model.db~ptr == this.db~ptr {
                // Update an existing record.
                this.setWhereForPrimaryKey(model);
                return this.db.exec(Update()~use_in(update) no_injection {
                    update.table = this.getTableName();
                    update.columns = getColumnNames();
                    update.data = getRecordData(model);
                    update._condition = this.where;
                });
            } else {
                // Create a new record.
                def res: Result = this.db.exec(Insert()~use_in(insert) no_injection {
                    insert.table = this.getTableName();
                    insert.columns = getColumnNames();
                    insert.data = getRecordData(model);
                });
                if res model.db~no_deref = this.db;
                return res;
            }
        }

        handler this.delete(model: ref[Model]): Result {
            this.setWhereForPrimaryKey(model);
            def res: Result = this.delete();
            if res model.db~ptr = 0;
            return res;
        }

        handler this.delete(): Result {
            return this.db.exec(Delete()~use_in(delete) {
                delete.table = this.getTableName();
                delete._condition = this.where;
            });
        }
    }
}

