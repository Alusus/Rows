@merge module Rows {
    class FieldConstraints {
        def notNull: int = -1;
        def unique: int = -1;
        def default: int = -1;
        def check: int = -1;
        def stringRep: Array[String];
        def fieldConsString: String = "";

        handler this~init() {
            def v: String;
            v = "NOT NULL";
            this.stringRep.add(v);
            v = "UNIQUE";
            this.stringRep.add(v);
            v = "DEFAULT";
            this.stringRep.add(v);
            v = "CHECK";
            this.stringRep.add(v);
        }

        handler this.setNotNullConstraint() {
            if this.notNull == -1 {
                this.notNull = 0;
                def par: String="";
                this.addConstraint(this.notNull, par);
            }
        }

        handler this.setUniqueConstraint() {
            if this.unique == -1 {
                this.unique=1;
                def par: String="";
                this.addConstraint(this.unique,par);
            }
        }

        handler this.setDefaultConstraint(defaultValue: String) {
            if this.default == -1 {
                this.default=2;
                this.addConstraint(this.default, defaultValue);
            }
        }

        handler this.setCheckConstraint(cond: String) {
            if this.check == -1 {
                this.check = 3;
                def conString: String;
                conString = "( ";
                conString = conString + cond + ")";
                this.addConstraint(this.check, conString);
            }
        }

        handler this.addConstraint(constNumber: int, par: String) {
            if par != "" {
                this.fieldConsString = this.fieldConsString + " " + this.stringRep(constNumber) + " " + par;
            } else {
                this.fieldConsString = this.fieldConsString + " " + this.stringRep(constNumber);
            }
        }

        handler this.getFieldConsString(): String {
            return this.fieldConsString;
        }
    }

    class TableConstraints {
        def primaryKeyConsString: String;
        def foreignKeyConsString: Array[String];

        handler this.setPrimaryKeyConstraint(columns: Array[String]) {
            this.primaryKeyConsString = "PRIMARY KEY ( ";
            this.primaryKeyConsString = this.primaryKeyConsString + columns(0);
            def i: int;
            for i = 1, i < columns.getLength(), i = i+1 {
                this.primaryKeyConsString = this.primaryKeyConsString + ", " + columns(i);
            }
            this.primaryKeyConsString = this.primaryKeyConsString + " )";
        }

        handler this.addForgenKey(col: String, refTable: String, refCol: String) {
            def forKey: String = "FOREIGN KEY ( ";
            forKey = forKey + col + ") " + "REFERENCES " + refTable + " (" + refCol + ")";
            this.foreignKeyConsString.add(forKey);
        }

        handler this.getPrimaryKeyConsString(): String {
            return this.primaryKeyConsString;
        }

        handler this.getForgenKeyConsString(): Array[String] {
            return this.foreignKeyConsString;
        }
    }
}

