@merge module Rows {
    class Update {
        def execString: String = "UPDATE ";
        def tableName: String = "";
        def data: Array[String];
        def columnNames: Array[String];
        def conditionString: String = "";
        def updateString: String = "";
        def dbType: int;
        def mysqlObj: MySql.Db ;
        def pgsqlObj: PostgreSql.Db;
        // TODO: Implement Sqlite.
        // def sqliteObj: Sqlite.Db;

        handler this.setTableName(tableName: String) {
            this.tableName = tableName;
        }

        handler this.setData(data: Array[String]) {
            this.data = data;
        }

        handler this.getData(): Array[String] {
            return this.data;
        }

        handler this.setUpdateString(updateString: String) {
            this.updateString = updateString;
        }

        handler this.getUpdateString(): String {
            return this.updateString;
        }

        handler this.setMysqlObj(mysqlObj: MySql.Db) {
            this.mysqlObj = mysqlObj;
            this.dbType = 0;
        }

        handler this.getMysqlObj(): MySql.Db {
            return this.mysqlObj;
        }

        handler this.setPgsqlObj(pgsqlObj: PostgreSql.Db) {
            this.pgsqlObj = pgsqlObj;
        }

        handler this.getPgsqlObj(): PostgreSql.Db {
            return this.pgsqlObj;
        }

        // TODO: Uncomment once Sqlite is implemented.
        /* handler this.setSqliteObj(sqliteObj: Sqlite.Db) {
            this.sqliteObj = sqliteObj;
        }

        handler this.getSqliteObj(): Sqlite.Db {
            return this.sqliteObj;
        } */

        handler this.setColumnNames(columnNames: Array[String]) {
            this.columnNames = columnNames;
        }

        handler this.getColumnNames(): Array[String] {
            return this.columnNames;
        }

        handler this.setConitionString(conditionString: String) {
            this.conditionString = conditionString;
        }

        handler this.getConitionString(): String {
            return this.conditionString;
        }

        handler this.getExecString(): String {
            return this.execString;
        }

        handler this.generateExecString() {
            def i: int = 0;
            this.execString = "UPDATE";
            this.execString += String(" ") + this.tableName + "\n";
            this.execString += String(" SET ");
            if this.updateString == "" {
                for i = 0, i < this.data.getLength() - 1, i = i + 1 {
                    this.execString += this.columnNames(i) + String(" = ") + this.data(i) + String(" , ");
                }
                if this.data.getLength() > 0 {
                    this.execString += this.columnNames(this.columnNames.getLength()-1)
                        + String(" = ") + this.data(this.data.getLength()-1) + String("\n");
                }
            } else {
                this.execString += this.updateString + String("\n");
            }
            this.execString += " WHERE " ;
            this.execString += this.conditionString + "\n" ;
        }

        handler this.exec() {
            if this.dbType == 1 {
                Console.print("\n");
                this.pgsqlObj.connectDb();
                this.pgsqlObj.exec(this.execString.buf);
                Console.print(this.pgsqlObj.errorMessage());
            } else if this.dbType == 0 {
                if this.mysqlObj.conn == null {
                    Console.print("after conn %s \n", this.mysqlObj.errorMessage());
                } else {
                    this.mysqlObj.exec(this.execString.buf);
                }
                Console.print(this.mysqlObj.errorMessage());
                Console.print("\n");
            }
        }
    }
}

