@merge module Rows {
    class Data {
        def fieldConstraints:  FieldConstraints;
        def mysqlString: String;
        def sqliteString: String;
        def pgsqlString: String ;
        def dataBaseType: int = 0;  //0 for mysql 1 for sqlite and 2 for pgsql

        handler this.getDataString(): String {
            if this.dataBaseType == 0 return this.mysqlString
            else if this.dataBaseType == 1 return this.sqliteString
            else if this.dataBaseType == 2 return this.pgsqlString
            else return this.pgsqlString;
        }

        handler this.getFConstrants(): FieldConstraints {
            return this.fieldConstraints;
        }
    }

    class Integer {
        @injection def data: Data;
        this.mysqlString = "INT";
        this.sqliteString = "INTEGER";
        this.pgsqlString = "integer";
    }

    class BigInteger {
        @injection def data: Data;
        this.mysqlString = "BIGINT";
        this.pgsqlString = "bigint";
        this.sqliteString = "INTEGER";
    }

    class SmallInteger {
        @injection def data: Data;
        this.mysqlString = "SMALLINT";
        this.pgsqlString = "smallint";
        this.sqliteString = "INTEGER";
    }

    class TinyInteger {
        @injection def data: Data;
        this.mysqlString = "TINYINT";
        this.pgsqlString = "smallint";
        this.sqliteString = "INTEGER";
    }

    class Real {
        @injection def data: Data;
        this.mysqlString = "REAL";
        this.pgsqlString = "real";
        this.sqliteString = "REAL";
    }

    class Float {
        @injection def data: Data;
        this.mysqlString = "FLOAT";
        this.pgsqlString = "double precision";
        this.sqliteString = "REAL";
    }

    class Decimal {
        @injection def data: Data;
        this.mysqlString = "DECIMAL";
        this.pgsqlString = "double precision";
        this.sqliteString = "DECIMAL";
    }

    class Xml {
        @injection def data: Data;
        this.mysqlString = "XML";
        this.pgsqlString = "";
        this.sqliteString = "";
    }

    class VarChar {
        @injection def data: Data;
        def length: int = 50;
        this.mysqlString = "VARCHAR";
        this.pgsqlString = "varchar";
        this.sqliteString = "VARCHAR";

        handler this~init(length: int) {
            this.length = length;
            this.mysqlString = this.mysqlString + "(" + this.length + ")";
            this.pgsqlString = this.pgsqlString + "(" + this.length + ")";
            this.sqliteString = this.sqliteString + "(" + this.length + ")";
        }

        handler this~init() {
            this.mysqlString = this.mysqlString + "(" + this.length + ")";
            this.pgsqlString = this.pgsqlString + "(" + this.length + ")";
            this.sqliteString = this.sqliteString + "(" + this.length + ")";
        }
    }

    class CharType {
        @injection def data: Data;
        def length: int = 1;
        this.mysqlString = "CHAR";
        this.pgsqlString = "char";
        this.sqliteString = "CHAR";

        handler this~init(length: int) {
            this.length = length;
            this.mysqlString = this.mysqlString + "(" + this.length + ")";
            this.pgsqlString = this.pgsqlString + "(" + this.length + ")";
            this.sqliteString = this.sqliteString + "(" + this.length + ")";
        }

        handler this~init() {
            this.mysqlString = this.mysqlString + "(" + this.length + ")";
            this.pgsqlString = this.pgsqlString + "(" + this.length + ")";
            this.sqliteString = this.sqliteString + "(" + this.length + ")";
        }
    }

    class Text {
        @injection def data: Data;
        def length: int = 50;
        this.mysqlString = "TEXT";
        this.pgsqlString = "TEXT";
        this.sqliteString = "TEXT";

        handler this~init(length: int) {
            this.length = length;
            this.mysqlString = this.mysqlString + "(" + this.length + ")";
            this.pgsqlString = this.pgsqlString + "(" + this.length + ")";
            this.sqliteString = this.sqliteString + "(" + this.length + ")";
        }

        handler this~init() {
            this.mysqlString = this.mysqlString + "(" + this.length + ")";
            this.pgsqlString = this.pgsqlString + "(" + this.length + ")";
            this.sqliteString = this.sqliteString + "(" + this.length + ")";
        }
    }

    class Date {
        @injection def data: Data;
        this.mysqlString = "Date";
        this.pgsqlString = "date";
        this.mysqlString = "Date";
    }
}

