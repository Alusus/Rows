@merge module Rows {
    class Create {
        def dbType: int;
        def mysqlObj: MySql.Db;
        def pgsqlObj: PostgreSql.Db;
        def sqliteObj: Sqlite.Db;

        def execString: String = "CREATE TABLE";
        def notExistFlag: bool = 0;
        def name: String = "";
        def data: ptr[Data];

        def columnNames: String;
        def colsString: String = "";
        def tblConstraints: ptr[TableConstraints];
        def tblConstraintsString: String = "";

        handler this.setTableName(name: String) {
            this.name = name;
        }

        handler this.setNotExistFlag() {
            this.notExistFlag = 1;
        }

        handler this.setDataType(data: ptr[Data]) {
            this.data = data;
        }

        handler this.getColsString(): String {
            return this.colsString;
        }

        handler this.setColumnNames(columnNames: String) {
            this.columnNames = columnNames;
        }

        handler this.getColumnNames(): Array[String] {
            return this.columnNames;
        }

        handler this.addToColsString() {
            this.colsString = this.colsString + this.columnNames + " ";
            this.colsString = this.colsString + this.data~cnt.getDataString() + " ";
            this.colsString = this.colsString + this.data~cnt.fieldConstraints.getFieldConsString();
            this.colsString = this.colsString + ",\n";
        }

        handler this.getColsString(): String {
            return this.colsString;
        }

        handler this.setTblConstraints(tblConstraints: ptr[TableConstraints]) {
            this.tblConstraints = tblConstraints;
        }

        handler this.setTblConstraintsString() {
            def pKey: String;
            def fKey: Array[String];
            pKey = this.tblConstraints~cnt.getPrimaryKeyConsString();
            fKey = this.tblConstraints~cnt.getForgenKeyConsString();
            this.tblConstraintsString = "";
            this.tblConstraintsString = this.tblConstraintsString + pKey;
            def i: int = 0;
            if fKey.getLength() > 0 this.tblConstraintsString=this.tblConstraintsString+ "," + "\n";
            for i = 0, i < fKey.getLength() - 1, i = i+1 {
                this.tblConstraintsString = this.tblConstraintsString + fKey(i);
                this.tblConstraintsString = this.tblConstraintsString + " ,\n";
            }
            if fKey.getLength() > 0 this.tblConstraintsString=this.tblConstraintsString + fKey(i);
        }

        handler this.getTConstString(): String {
            return this.tblConstraintsString;
        }

        handler this.getExecString(): String {
            return this.execString;
        }

        handler this.generateExecString() {
            this.execString = "CREATE TABLE ";
            if this.notExistFlag {
                this.execString = this.execString + "IF NOT EXISTS " +this.name + "(\n";
            } else {
                this.execString = this.execString + this.name + "(\n";
            }
            this.execString = this.execString + this.colsString ;
            if this.tblConstraintsString != "" {
                this.execString = this.execString + "\n";
                this.execString = this.execString + this.tblConstraintsString +");";
            } else {
                this.execString = this.execString + ");";
            }
        }

        handler this.setMysqlObj(mysqlObj: MySql.Db) {
            this.mysqlObj = mysqlObj;
            this.dbType = 0;
        }

        handler this.getMysqlObj(): MySql.Db {
            return this.mysqlObj;
        }

        handler this.setPgsqlObj(pgsqlObj: Db) {
            this.pgsqlObj = pgsqlObj;
            this.dbType = 1;
        }

        handler this.getPgsqlObj(): PostgreSql.Db {
            return this.pgsqlObj;
        }

        handler this.setSqliteObj(sqliteObj: Sqlite.Db) {
            this.sqliteObj = sqliteObj;
            this.dbType = 2;
        }

        handler this.getSqliteObj(): Sqlite.Db {
            return this.sqliteObj;
        }

        handler this.exec() {
            if this.dbType == 1 {
                Console.print("inside exec : ");
                Console.print(this.pgsqlObj.Connstring);
                Console.print("\n");
                this.pgsqlObj.connectDb();
                this.pgsqlObj.exec(this.execString.buf);
                Console.print(this.pgsqlObj.errorMessage());
            } else if this.dbType == 0 {
                Console.print("inside exec mysql:\n");
                Console.print(this.execString.buf);
                Console.print("\n");
                if this.mysqlObj.conn == null {
                    Console.print("after conn %s \n", this.mysqlObj.errorMessage());
                } else {
                    this.mysqlObj.exec(this.execString.buf);
                }
                Console.print(" mysql: after exec\n");
                Console.print(this.mysqlObj.errorMessage());
                Console.print("\n");
            }
        }
    }
}

