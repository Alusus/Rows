import "Data";
import "Srl/refs";
import "Create";
import "Srl/Console";
import "Srl/refs";
import "Srl/System";
import "Core/Data";
import "Spp";
import "Receive";
import "Insert";
import "Update";
import "DbConBuilder";
import "Delete.alusus"
use Srl;
use Core.Basic;
use Core.Data;
use Core.Data.Ast;

module AutoBuild
{
    use DataType;
    def TioSrdRef: alias SrdRef[Core.Basic.TiObject];
    def notFlag : bool=false;
    function generateAddingElementNames (varName: String, elements: Array[ref[Core.Basic.TiObject]])
    {
        def i: Int;
        for i = 0, i < elements.getLength(), ++i
        {
            def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
            def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
            def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);
            Spp.astMgr.insertAst(
                ast { names.add(Srl.String("{{name}}")) },
                Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                    .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                    .set(Srl.String("name"), binding.getMember("name"))

            );
        }
    }
    func generateWhere (obj: ref[TiObject] ): TioSrdRef {
        def result: TioSrdRef;
        def result2: TioSrdRef;
        def resultArray: Array[TioSrdRef];

        if obj~ptr == 0 {
            System.fail(1, "generateWhere: obj is null.\n");
        }

       if isDerivedFrom[obj, PrefixOperator] {

            AutoBuild.notFlag=true;

            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);

              if !Spp.astMgr.buildAst(
                ast {String("") +(name)  },
                Map[String, ref[TiObject]]()
                .set(String("name"), generateWhere(mapContaining.getElement(0)).obj)
                ,
                result2
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }

            return result2


        }

          else if isDerivedFrom[obj, ComparisonOperator] {
            def binding: ref[Binding](getInterface[obj, Binding]);
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            if !Spp.astMgr.buildAst(
                ast { String("{{name}}") + String(" {{op}} '") + val  + String("'") },
                Map[String, ref[TiObject]]()
                    .set(String("name"), mapContaining.getElement("first"))
                    .set(String("op"), binding.getMember("type"))
                    .set(String("val"), mapContaining.getElement("second")),
                result
            ) {
                System.fail(1, "generateWhere/ComparisonOperator: error\n");
            }
        }
                else if isDerivedFrom[obj, AssignmentOperator] {
            def binding: ref[Binding](getInterface[obj, Binding]);
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            def containing: ref[Containing](getInterface[mapContaining.getElement("second"), Containing]);
            if !Spp.astMgr.buildAst(
                ast { String("{{name}}") + String(" {{op}} '") + val  + String("'") },
                Map[String, ref[TiObject]]()
                    .set(String("name"), mapContaining.getElement("first"))
                    .set(String("op"), binding.getMember("type"))
                    .set(String("val"), mapContaining.getElement("second")),
                result
            ) {
                System.fail(1, "generateWhere/ComparisonOperator: error\n");
            }
        }
         else if isDerivedFrom[obj, LogOperator] {
            def binding: ref[Binding](getInterface[obj, Binding]);
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            if !Spp.astMgr.buildAst(
                ast { (cond1) + String(" {{op}} ") + (cond2) },
                Map[String, ref[TiObject]]()
                    .set(String("cond1"), generateWhere(mapContaining.getElement("first")).obj)
                    .set(String("op"), binding.getMember("type"))
                    .set(String("cond2"), generateWhere(mapContaining.getElement("second")).obj),
                result
            ) {
                System.fail(1, "generateWhere/LogOperator: error\n");
            }
        } else if isDerivedFrom[obj, Bracket] {

            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            if !Spp.astMgr.buildAst(
                ast { String("(") + (cond) + String(")") },
                Map[String, ref[TiObject]]()
                   .set(String("cond"), generateWhere(mapContaining.getElement("operand")).obj),
                result
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }
        }
        else if isDerivedFrom[obj, LinkOperator] {
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            def binding: ref[Binding](getInterface[obj, Binding]);
            def mapContaining2 : ref[MapContaining](getInterface[mapContaining.getElement("second"), MapContaining]);
            def containing: ref[Containing](getInterface[mapContaining2.getElement("operand"), Containing]);
            def i : int =0;
            if (AutoBuild.notFlag==false)
            {


                        if !Spp.astMgr.buildAst(
                ast { String("{{name}}") + String(" in (") + String(" ")  },
                Map[String, ref[TiObject]]()
                .set(String("name"),mapContaining.getElement("first"))
                ,
                result2
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }
            }
             else
            {mapContaining.getElement(0)


                        if !Spp.astMgr.buildAst(
                ast { String("{{name}}") + String(" NOT  in (") + String(" ")  },
                Map[String, ref[TiObject]]()
                .set(String("name"),mapContaining.getElement("first"))
                ,
                result2
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }AutoBuild.notFlag=false;
            }
            resultArray.add(result2);
           for i=0 , i < containing.getElementCount()~cast[Int]-1 , i = i+1
           {

            if !Spp.astMgr.buildAst(
                ast {result + String("'" )+ name + String("' , ")   },
                Map[String, ref[TiObject]]()
                .set(String("name"), containing.getElement(i))
                .set(String("result"), resultArray(i))
                ,
                result2
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }
            resultArray.add(result2)
           }
           if !Spp.astMgr.buildAst(
                ast {result + String("'" )+ name + String("' ) ")   },
                Map[String, ref[TiObject]]()
                .set(String("name"), containing.getElement(containing.getElementCount()~cast[Int]-1))
                .set(String("result"), resultArray(resultArray.getLength()-1))
                ,
                result
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }

        }
        else if isDerivedFrom[obj, BitwiseOperator] {

            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            def binding: ref[Binding](getInterface[obj, Binding]);
            def mapContaining2 : ref[MapContaining](getInterface[mapContaining.getElement("second"), MapContaining]);
            def containing: ref[Containing](getInterface[mapContaining2.getElement("operand"), Containing]);



            def i : int =0;
            if (AutoBuild.notFlag==false)
            {

                        if !Spp.astMgr.buildAst(
                ast { String("{{name}}") + String(" BETWEEN ") + String(" ")  },
                Map[String, ref[TiObject]]()
                .set(String("name"),mapContaining.getElement("first"))
                ,
                result2
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }}
             else
            {

                        if !Spp.astMgr.buildAst(
                ast { String("{{name}}") + String(" NOT  BETWEEN ") + String(" ")  },
                Map[String, ref[TiObject]]()
                .set(String("name"),mapContaining.getElement("first"))
                ,
                result2
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }AutoBuild.notFlag=false}
            resultArray.add(result2);
           for i=0 , i < containing.getElementCount()~cast[Int]-1 , i = i+1
           {
            if !Spp.astMgr.buildAst(
                ast {result + String("'" )+ name + String("' ")   },
                Map[String, ref[TiObject]]()
                .set(String("name"), containing.getElement(i))
                .set(String("result"), resultArray(i))
                ,
                result2
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }
            resultArray.add(result2)
           }
           if !Spp.astMgr.buildAst(
                ast {result + String("and '" )+ name + String("'")   },
                Map[String, ref[TiObject]]()
                .set(String("name"), containing.getElement(containing.getElementCount()~cast[Int]-1))
                .set(String("result"), resultArray(resultArray.getLength()-1))
                ,
                result
            ) {
                System.fail(1, "generateWhere/Bracket: error\n");
            }
        }
        else {
         def binding: ref[Binding](getInterface[obj, Binding]);

            if !Spp.astMgr.buildAst(
                ast {
                String("bye")
                 },
                                Map[String, ref[TiObject]]()
                   .set(String("op"), binding.getMember("type")),
                result
            ) {
                System.fail(1, "Failed to build condition.\n");
            }
        }
        return result;
    }

   func generateUpdateData (obj: ref[TiObject] ): TioSrdRef {
        def result: TioSrdRef;
        def result2: TioSrdRef;
        def resultArray: Array[TioSrdRef];

        if obj~ptr == 0 {
            System.fail(1, "generateWhere: obj is null.\n");
        }
         if isDerivedFrom[obj ,AssignmentOperator] {
            def binding2: ref[Binding](getInterface[obj, Binding]);
            def mapContaining2: ref[MapContaining](getInterface[obj, MapContaining]);
         if !Spp.astMgr.buildAst(
                ast { String("{{name}}") + String(" {{op}} '") + val  + String("'")  },
                Map[String, ref[TiObject]]()
                    .set(String("name"), mapContaining2.getElement("first"))
                    .set(String("op"), binding2.getMember("type"))
                    .set(String("val"), mapContaining2.getElement("second")),
                result
            ) {
                System.fail(1, "generateWhere/ComparisonOperator: error\n");
            }}

         else if isDerivedFrom[obj, Bracket] {
            def mapContaining: ref[MapContaining](getInterface[obj, MapContaining]);
            def containing: ref[Containing](getInterface[mapContaining.getElement("operand"), Containing]);
            def i : int =0;
              if !Spp.astMgr.buildAst(
                ast {String("")  },
                Map[String, ref[TiObject]]()
                ,
                result2
            ) {
                System.fail(1, "generateWhere/ComparisonOperator: error\n");
            }
            resultArray.add(result2)

           for i=0 , i < containing.getElementCount()~cast[Int]-1 , i = i+1
           {


            if isDerivedFrom[containing.getElement(i), AssignmentOperator] {
                def binding2: ref[Binding](getInterface[containing.getElement(i), Binding]);
                def mapContaining2: ref[MapContaining](getInterface[containing.getElement(i), MapContaining]);
                def containing2: ref[Containing](getInterface[mapContaining2.getElement("second"), Containing]);
                if !Spp.astMgr.buildAst(
                    ast {result +  String("{{name}}") + String(" {{op}} '") + val  + String("' , ")  },
                    Map[String, ref[TiObject]]()
                        .set(String("name"), mapContaining2.getElement("first"))
                        .set(String("op"), binding2.getMember("type"))
                        .set(String("result"), resultArray(i))
                        .set(String("val"), mapContaining2.getElement("second")),
                    result2
                ) {
                    System.fail(1, "generateWhere/ComparisonOperator: error\n");
                }
                }
                resultArray.add(result2)
        }
        if isDerivedFrom[containing.getElement(containing.getElementCount()~cast[Int]-1), AssignmentOperator] {

            def binding2: ref[Binding](getInterface[containing.getElement(i), Binding]);
            def mapContaining2: ref[MapContaining](getInterface[containing.getElement(i), MapContaining]);
            def containing2: ref[Containing](getInterface[mapContaining2.getElement("second"), Containing]);
             if !Spp.astMgr.buildAst(
                    ast {result +  String("{{name}}") + String(" {{op}} '") + val  + String("'")  },
                    Map[String, ref[TiObject]]()
                        .set(String("name"), mapContaining2.getElement("first"))
                        .set(String("op"), binding2.getMember("type"))
                         .set(String("result"), resultArray(resultArray.getLength()-1))
                        .set(String("val"), mapContaining2.getElement("second")),
                    result
                ) {
                    System.fail(1, "generateWhere/ComparisonOperator: error\n");
                }
            }
        }
        else
        {
            def binding: ref[Binding](getInterface[obj, Binding]);
            if !Spp.astMgr.buildAst(
                    ast {
                    String("Wrong data !")
                     },
                    Map[String, ref[TiObject]]()
                         .set(String("op"), binding.getMember("type")),
                    result)
                    {
                        System.fail(1, "Failed to build condition.\n");
                    }
        }
        return result;
    }
    function generateAddingElementTypes (varName: String, elements: Array[ref[Core.Basic.TiObject]])
    {
        def i: Int;
        for i = 0, i < elements.getLength(), ++i
        {
            def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
            def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
            def containing: ref[Core.Basic.MapContaining](Core.Basic.getInterface[d, Core.Basic.MapContaining]);
            Spp.astMgr.insertAst(
                ast { names.add(Srl.String("{{name}}")) },
                Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                    .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                    .set(Srl.String("name"), castRef[containing.getElement("target"), Core.Data.Ast.Identifier])
            );
        }
    }

    macro implementGetElementNames [condition, parent  ]
    {
          Array[String]().
          {
              preprocess
             {
                    def elements: Array[ref[Core.Basic.TiObject]];
                     elements = Spp.astMgr.findElements(
                            ast { condition },
                             parent,
                            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
                         );
                    AutoBuild.generateAddingElementNames(String("this"), elements);
             }
          }
    }

    macro implementGetElementTypes [condition, parent]
    {
        Array[String]().
        {
            preprocess
            {
                def elements: Array[ref[Core.Basic.TiObject]];
                elements = Spp.astMgr.findElements(
                    ast { condition },
                    parent,
                    Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
                );
                AutoBuild.generateAddingElementTypes(String("this"), elements);
            }
        }
    }



    func generateDataType (className : String, tableName : String  , parent : ref[TiObject] , varArray:Array[String] , typeArray : Array[String] ): TioSrdRef
    {
        def result: TioSrdRef;
        def list: SrdRef[Core.Data.Ast.Scope] = newSrdObj[Core.Data.Ast.Scope];
        def listContainer: DynContainerOf[list.obj];
        def resArray : Array[TioSrdRef];
        def resArray2 : Array[TioSrdRef];
        def resArray3 :Array[TioSrdRef];
        def result2: TioSrdRef;
        def result3: TioSrdRef;
        def i : int=0;
        def iString:String;
        iString="" + i;
        if !Spp.astMgr.buildAst
            (
              (ast use DbConBuilder ),
             Map[String, ref[TiObject]]()
                 .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
             result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);

        if !Spp.astMgr.buildAst
            (
             (ast  def _Where :String="" ),
             Map[String, ref[TiObject]]()
                 .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
             result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);

                if !Spp.astMgr.buildAst
            (
             (ast  def _Update :String="" ),
             Map[String, ref[TiObject]]()
                 .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
             result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);

        if !Spp.astMgr.buildAst
            (
             (ast @shared def DbCon :DbConBuilder ),
             Map[String, ref[TiObject]]()
                 .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
             result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
        if !Spp.astMgr.buildAst
            (
            (ast def classData : className ),
            Map[String, ref[TiObject]]()
                .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                .set(String("className"), Core.Data.Ast.Identifier(className)),
            result2
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        resArray.add(result2);

        for i=0 , i< typeArray.getLength() , i=i+1
        {
            iString=String("") + i;
            if (i==0)
            {
                if(typeArray(i)=="String" && (varArray(i) != "_Where" && varArray(i) != "_Update"))
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  classData.strVal=dataArray(i)(j) ),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("strVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                else if(typeArray(i)=="int" )
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  classData.intVal=Receive.getInt(dataArray(i)(j).buf )),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("intVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                else if(typeArray(i)=="float")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  classData.floatVal=Receive.getFloat(dataArray(i)(j).buf )),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("floatVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }

                resArray.add(result3);

            }
            else
            {
                if(typeArray(i)=="String" && (varArray(i) != "_Where" && varArray(i) != "_Update"))
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData classData.strVal=dataArray(i)(j)} ),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("beforData"), resArray(i))
                            .set(String("strVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="int")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  {beforData classData.intVal=Receive.getInt(dataArray(i)(j).buf )}),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("beforData"), resArray(i))
                            .set(String("intVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="float")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast {beforData  classData.floatVal=Receive.getFloat(dataArray(i)(j).buf )}),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("beforData"), resArray(i))
                            .set(String("floatVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }

                resArray.add(result3);
            }
        }

        // trans data to string to add it to the database

        resArray2.add(result2);
        for i=0 , i< typeArray.getLength() , i=i+1
        {
            if (i==0)
            {
                if(typeArray(i)=="String" && (varArray(i) != "_Where" && varArray(i) != "_Update"))
                {
                    if !Spp.astMgr.buildAst
                        (
                        ast  {data.add(this.strVal) colname.add(String("{{strVal}}")) },
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("strVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                    System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="int")
                {
                    if !Spp.astMgr.buildAst
                        (
                        ast { data.add(String( String("") + this.intVal)) colname.add(String("{{intVal}}")) },
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("intVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="float")
                {
                    if !Spp.astMgr.buildAst
                        (
                        ast  {data.add(String( String("") + this.floatVal)) colname.add(String("{{floatVal}}")) },
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("floatVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                resArray2.add(result3);
            }
            else
            {
                if(typeArray(i)=="String" && (varArray(i) != "_Where" && varArray(i) != "_Update"))
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData data.add(this.strVal) colname.add(String("{{strVal}}"))   } ),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("beforData"), resArray2(i))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("strVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="int")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  {beforData  data.add(String( String("") + this.intVal)) colname.add(String("{{intVal}}")) }),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("beforData"), resArray2(i))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("intVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="float")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast {beforData data.add(String( String("") +this.floatVal))  colname.add(String("{{floatVal}}")) }),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("beforData"), resArray2(i))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("floatVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                resArray2.add(result3);
            }
        }

        //init ref and = inint

        resArray3.add(result2);
        for i=0 , i< typeArray.getLength() , i=i+1
        {
            if (i==0 && (varArray(i)!="DbCon"&&varArray(i)!="_MyClass"))
            {
                if !Spp.astMgr.buildAst
                    (
                    (ast  this.varItem=value.varItem ) ,
                    Map[String, ref[TiObject]]()
                        .set(String("varItem"), Core.Data.Ast.Identifier(varArray(i))),
                    result3
                    )
                {
                    System.fail(1, "generateDataType/build Data Type var : error\n");
                }
                resArray3.add(result3);
            }
            else if( (varArray(i)!="DbCon"&&varArray(i)!="_MyClass"))
            {
                if !Spp.astMgr.buildAst
                    (
                    (ast{ beforData this.varItem=value.varItem;  } ),
                    Map[String, ref[TiObject]]()
                        .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                        .set(String("data"), Core.Data.Ast.Identifier("data"))
                        .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                        .set(String("beforData"), resArray3(i))
                        .set(String("varItem"), Core.Data.Ast.Identifier(varArray(i))),
                    result3
                    )
                {
                    System.fail(1, "generateDataType/build Data Type var : error\n");
                }
                resArray3.add(result3);
            }
        }
        if !Spp.astMgr.buildAst
            (
            (ast handler this~init(){ }  ),
            Map[String, ref[TiObject]]()
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
            result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);

              if !Spp.astMgr.buildAst(
           (ast handler this~init(ref[className])
           {
                initfunc
            }),
            Map[String, ref[TiObject]]()
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("initfunc"), resArray3(resArray3.getLength()-1))
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
            result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
        if !Spp.astMgr.buildAst(
           (ast handler this= ref[className]
           {

                initfunc

            }  ),
            Map[String, ref[TiObject]]()
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("initfunc"), resArray3(resArray3.getLength()-1))
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
            result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
        if !Spp.astMgr.buildAst(
           (ast handler this.setDbCon(DbsCon :DbConBuilder )
           {
               DbCon =DbsCon;

               }  ),
            Map[String, ref[TiObject]]()
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
            result
        )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
        if !Spp.astMgr.buildAst(
           (ast handler this.getDbCon(  ):DbConBuilder.DbConBuilder
           {
               return DbCon;

               }  ),
            Map[String, ref[TiObject]]()
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
            result
        )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
                if !Spp.astMgr.buildAst(
           (ast handler this.getData() : Array[cn]
           {
               def table : Receive.Receive ;
               def  mySqlObj : MySql.Db ;
               def  pgSqlObj : PostgresSql.Db ;
               def  dataArray : Array[Array[String]];
               def data : Array[cn];

              if DbCon.getDbConType()==0
                 {
                      mySqlObj=DbCon.mySqlConBuilder();  table.setMySqlObj(mySqlObj);
                     mySqlObj.endConnection();
                 }
                 else if DbCon.getDbConType()==1
                 {
                      pgSqlObj=DbCon.pgSqlConBuilder();  table.setPgSqlObj(pgSqlObj);
                     pgSqlObj.endConnection();
                 }
                 if this._Where!=""
                 {
                    table.setCString(this._Where);
                 }
                 def s : Array[String];
                 s.add(String("{{tableName}}") );
                 table.setTableName(s);
                 table.setExecString();
                 table.setData();
                dataArray= table.getData();
                def i : int =0;
                for i=0 , i< dataArray.getLength() , i+=1
                {
                    buildclassData
                    getclassData
                    data.add(classData);
                }
                table.MySqlObj.endConnection();
                return data;
             }  ),
            Map[String, ref[TiObject]]()
                .set(String("cn"), Core.Data.Ast.Identifier(className))
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("tableName"), Core.Data.Ast.Identifier(tableName))
                .set(String("buildclassData"), result2)
                .set(String("getclassData"), resArray(resArray.getLength()-1))
                .set(String("table"), Core.Data.Ast.Identifier(String("table")))
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj")))
                .set(String("dataArray"), Core.Data.Ast.Identifier(String("dataArray")))
                .set(String("data"), Core.Data.Ast.Identifier(String("data")))
                .set(String("s"), Core.Data.Ast.Identifier(String("s")))
                .set(String("varType"), Core.Data.Ast.Identifier(String("varType"))),
            result
        )
        {
                System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);

       if !Spp.astMgr.buildAst(
           (ast handler this.saveData()
           {
               def table2 : Insert.Insert;
               def  mySqlObj : MySql.Db ;
               def  pgSqlObj : PostgresSql.Db ;
               def  data : Array[String];
               def colname : Array[String];
               def state : int=0;

              if DbCon.getDbConType()==0
                 {
                      mySqlObj=DbCon.mySqlConBuilder();  table2.setMySqlObj(mySqlObj);
                      mySqlObj.endConnection();
                 }

                 else if DbCon.getDbConType()==1
                 {
                      pgSqlObj=DbCon.pgSqlConBuilder();  table2.setPgSqlObj(pgSqlObj);
                     pgSqlObj.endConnection();
                 }
                 table2.setTableName(String("{{tableName}}" ));
                 getclassData
                 table2.setData(data);
                 table2.setColsName(colname);
                 table2.genrateColsString();
                 table2.setValString();
                 table2.setExecString();
                 table2.exec();
                 table2.MySqlObj.endConnection();
             }  ),
            Map[String, ref[TiObject]]()
                .set(String("cn"), Core.Data.Ast.Identifier(className))
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("tableName"), Core.Data.Ast.Identifier(tableName))
                .set(String("strVal"), Core.Data.Ast.Identifier(varArray(1)))
                .set(String("getclassData"), resArray2(resArray2.getLength()-1))
                .set(String("table2"), Core.Data.Ast.Identifier(String("table2")))
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj")))
                .set(String("dataArray"), Core.Data.Ast.Identifier(String("dataArray")))
                .set(String("data"), Core.Data.Ast.Identifier(String("data")))
                .set(String("s"), Core.Data.Ast.Identifier(String("s")))
                .set(String("varType"), Core.Data.Ast.Identifier(String("varType"))),
            result
        )
        {
                System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
             if !Spp.astMgr.buildAst(
           (ast handler this.deleteRowData( )
           {
               def  mySqlObj : MySql.Db ;
               def  pgSqlObj : PostgresSql.Db ;
               def table : Delete.Delete;
               if DbCon.getDbConType()==0
               {
                        mySqlObj=DbCon.mySqlConBuilder();
                        table.setMySqlObj(mySqlObj);
                        mySqlObj.endConnection();
                }

                 else if DbCon.getDbConType()==1
                 {
                      pgSqlObj=DbCon.pgSqlConBuilder();  table.setPgSqlObj(pgSqlObj);
                     pgSqlObj.endConnection();
                 }
                table.setTableName(String("{{tableName}}" ));
                table.setWhereCond(this._Where);
                table.genareteExecString();
                table.exec();
                table.MySqlObj.endConnection();
             }  ),
            Map[String, ref[TiObject]]()
                .set(String("tableName"), Core.Data.Ast.Identifier(tableName))
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj")))
                .set(String("table"), Core.Data.Ast.Identifier(String("table"))),

            result
        )
        {
                System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
        // def arabicname : alias updateData;

        if !Spp.astMgr.buildAst(
           (ast handler this.updateData()
           {

               def table2 : Update.Update;
               def  mySqlObj : MySql.Db ;
               def  pgSqlObj : PostgresSql.Db ;
               def  data : Array[String];
               def colname : Array[String];
               def state : int=0;
               if DbCon.getDbConType()==0
               {
                      mySqlObj=DbCon.mySqlConBuilder();  table2.setMySqlObj(mySqlObj);
                      mySqlObj.endConnection();
                }

                 else if DbCon.getDbConType()==1
                 {
                      pgSqlObj=DbCon.pgSqlConStringBuilder();  table2.setPgSqlObj(pgSqlObj);
                     pgSqlObj.endConnection();
                 }
                table2.setTableName(String("{{tableName}}" ));
                getclassData
                if(this._Update=="")
                {
                    table2.setData(data);
                    table2.setColsName(colname);
                }
                else
                {
                    table2.setUpdateString(this._Update);
                }
                table2.setConString(this._Where);
                table2.setExecString();
                table2.exec();
                table2.MySqlObj.endConnection();
             }  ),
            Map[String, ref[TiObject]]()
                .set(String("cn"), Core.Data.Ast.Identifier(className))
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("tableName"), Core.Data.Ast.Identifier(tableName))
                .set(String("strVal"), Core.Data.Ast.Identifier(varArray(1)))
                .set(String("getclassData"), resArray2(resArray2.getLength()-1))
                .set(String("table2"), Core.Data.Ast.Identifier(String("table2")))
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj")))
                .set(String("dataArray"), Core.Data.Ast.Identifier(String("dataArray")))
                .set(String("data"), Core.Data.Ast.Identifier(String("data")))
                .set(String("s"), Core.Data.Ast.Identifier(String("s")))
                .set(String("varType"), Core.Data.Ast.Identifier(String("varType"))),
            result
        )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);

        if !Spp.astMgr.buildAst
            (
             (ast @shared def _MyClass : className ),
             Map[String, ref[TiObject]]()
                 .set(String("className"), Core.Data.Ast.Identifier(className))
                 .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
             result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);

        if !Spp.astMgr.buildAst
            (
             (ast   macro where [condition] {

                                       className._MyClass._Where= preprocess {
                                                if !Spp.astMgr.insertAst(
                                                        AutoBuild.generateWhere(ast condition).obj
                                                             ) {
                                                           System.fail(1, "Failed to insert condition.\n");
                                                                 }
                                                                 }
                                                                // className._MyClass._Where=myq
                                                        className._MyClass
                                                }
                                                 ),
             Map[String, ref[TiObject]]()
                 .set(String("className"), Core.Data.Ast.Identifier(className))
                 .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
             result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);

        if !Spp.astMgr.buildAst
            (
             (ast   macro updateDataSet [dataSet] {

                                       className._MyClass._Update= preprocess {
                                                if !Spp.astMgr.insertAst(
                                                        AutoBuild.generateUpdateData(ast dataSet).obj
                                                             ) {
                                                           System.fail(1, "Failed to insert condition.\n");
                                                                 }
                                                                 }
                                                                // className._MyClass._Where=myq
                                                        className._MyClass
                                                }
                                                 ),
             Map[String, ref[TiObject]]()
                 .set(String("className"), Core.Data.Ast.Identifier(className))
                 .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
             result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
        return castSrdRef[list, TiObject];
    }

    macro getDataFunc [className , tableName , parent]
    {
        preprocess
         {
            def varArray : Array[String];
            varArray =AutoBuild.implementGetElementNames[elementType == "var",parent];
            def  typeArray : Array[String];
            typeArray=AutoBuild.implementGetElementTypes[elementType == "var", parent];
            if !Spp.astMgr.insertAst(
                AutoBuild.generateDataType(className ,tableName, parent ,varArray , typeArray  ).obj
            )
            {
                System.fail(1, "Failed to genrate data type.\n");
            }
         }
    }
}
