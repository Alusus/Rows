
import "Data";
import "Srl/refs";
import "Create";
import "Srl/Console";
import "Srl/refs";
import "Srl/System";
import "Core/Data";
import "Spp";
import "DbConBuilder";

module TableBuilder
{
    use DataType;
    def TioSrdRef: alias SrdRef[Core.Basic.TiObject];
    def DataTypeArray:Array[String];
    def DataTypeString : String;
    def DataTypePtr : ptr[Data];
    def paramsModsArray : Array[String];
    def val : String;
    def integerDataType : DataType.Integer;
    def bigIntegerDataType : DataType.BigInteger;
    def smallIntegerDataType : SmallInteger;
    def tinyIntegerDataType : TinyInteger;
    def realDataType : Real;
    def floatDataType : Float;

    def decimalDataType : Decimal;
    def xmlDataType : Xml;
    def varCharDataType : VarChar;
    def charTypeDataType : CharType;
    def textDataType : Text;
    def datesDataType : Dates;


    function generateAddingElementNames (varName: String, elements: Array[ref[Core.Basic.TiObject]])
    {
        def i: Int;
        for i = 0, i < elements.getLength(), ++i
        {

            def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
            def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);

            def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);

            Spp.astMgr.insertAst(
                                        ast { names.add(Srl.String("{{name}}")) },
                                        Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                                            .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                                            .set(Srl.String("name"), binding.getMember("name"))

                                        );

            }
    }


    function generateAddingElementMods (elements: Array[ref[Core.Basic.TiObject]] , var : Array[String]) : Array[Array[String]]
     {
        def i: Int;
        def colsMod : Array[Array[String]];
        def strArray : Array[String];
        def modArray : Array[String];

        for i = 0, i < elements.getLength(), ++i
        {

            strArray=TableBuilder.dumpModifiers(elements(i));

            modArray.add(var(i))


            colsMod.add(strArray);
        }

        return colsMod;
    }

    function generateAddingElementTypes (varName: String, elements: Array[ref[Core.Basic.TiObject]])
    {
        def i: Int;
        for i = 0, i < elements.getLength(), ++i
        {
            def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
            def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
            def containing: ref[Core.Basic.MapContaining](Core.Basic.getInterface[d, Core.Basic.MapContaining]);
            Spp.astMgr.insertAst(
                              ast { names.add(Srl.String("{{name}}")) },
                              Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                                  .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                                  .set(Srl.String("name"), castRef[containing.getElement("target"), Core.Data.Ast.Identifier])

                                 );

        }
    }
    macro implementGetElementNames [condition, parent  ]
    {
        Array[String]().
        {
            preprocess
            {
                def elements: Array[ref[Core.Basic.TiObject]];
                elements = Spp.astMgr.findElements(
                                        ast { condition },
                                        parent,
                                        Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
                                                              );
                TableBuilder.generateAddingElementNames(String("this"), elements);
            }
        }
    }

    macro implementGetElementMods [condition, parent  ]
    {




            def elements: Array[ref[Core.Basic.TiObject]];
            def i : int =0;
            def j : int =0;
            elements = Spp.astMgr.findElements(
                ast { condition },
                parent,
                Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
            );
            colsMod=TableBuilder.generateAddingElementMods( elements ,var );
            def params : Array[String];
            def cmpar:Array[Array[String]]

            for i=0 , i<colsMod.getLength() , ++i
            {
                cmpar.clear();
                if(colsMod(i).getLength() >0)
                {
                    for j=0 , j<colsMod(i).getLength() , ++j
                    {

                        params=TableBuilder.dumpElementModifierParams(elements(i),colsMod(i)(j).buf);
                        cmpar.add(params);
                    }
                }
                else
                {
                    def noParams : Array[String];
                    cmpar.add(noParams);
                }
                modsParams.add(cmpar);
            }




    }
    macro implementGetElementTypes [condition, parent]
    {
        Array[String]().
        {
            preprocess
            {
                def elements: Array[ref[Core.Basic.TiObject]];
                elements = Spp.astMgr.findElements(
                    ast { condition },
                    parent,
                    Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
                );
                TableBuilder.generateAddingElementTypes(String("this"), elements);
            }
       }
    }

    function numOfParams (Mod : String) : int
    {
        def i: Int;
        def paramsModsArray : Array[String];
        def val : String;
        val="notnull";
        paramsModsArray.add(val);
        val="unique";
        paramsModsArray.add(val);
        val="pk";
        paramsModsArray.add(val);
        val="defult";
        paramsModsArray.add(val);
        val="check";
        paramsModsArray.add(val);

        val="fk";
        paramsModsArray.add(val);
        for i = 0, i < paramsModsArray.getLength()-1, ++i
         {
            if (Mod== paramsModsArray(i))
            {
                if (i<3)
                {
                    return 0;
                }
                else if(i<5)
                {
                    return 1;
                }
                else if(i==5)
                {
                    return 2;
                }

            }

        }
        return -1;
    }


    function dumpModifiers (element: ref[Core.Basic.TiObject]) : Array[String]
     {
        def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
        def i: Int;
        def strArray : Array[String] ;
        if(modifiers~ptr!=0)
        {
            for i = 0, i < modifiers.getElementCount()~cast[Int], ++i
             {
                strArray.add(Spp.astMgr.getModifierKeyword(modifiers.getElement(i)));

            }
        }
        return strArray;
    }

    function dumpModifierParams(modifier: ref[Core.Basic.TiObject]) : Array[String]
    {
        def params: Srl.Array[Srl.String];
        Spp.astMgr.getModifierStringParams(modifier, params);
        return params;
    }

    function dumpElementModifierParams(element: ref[Core.Basic.TiObject], modName: ptr[array[Char]]) : Array[String]
     {
        def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
        def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifier(modifiers, modName));
        def params : Array[String];

        params=dumpModifierParams(modifier);
        return params;

    }

    function dumpElementModifierParams2(element: ref[Core.Basic.TiObject], modName: ptr[array[Char]])
     {
        def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(element, modName));
        dumpModifierParams(modifier);
    }

    function isDataType(varType : String) : int
    {
       def si : int ;
       def DataTypeArray:Array[String];
       def DataTypeString : String;
       DataTypeString="Integer";
       DataTypeArray.add(DataTypeString);
       DataTypeString="BigInteger";
       DataTypeArray.add(DataTypeString);
       DataTypeString="SmallInteger";
       DataTypeArray.add(DataTypeString);
       DataTypeString="TinyInteger";
       DataTypeArray.add(DataTypeString);
       DataTypeString="Real";
       DataTypeArray.add(DataTypeString);
       DataTypeString="Float";
       DataTypeArray.add(DataTypeString);
       DataTypeString="Decimal";
       DataTypeArray.add(DataTypeString);
       DataTypeString="Xml";
       DataTypeArray.add(DataTypeString);
       DataTypeString="VarChar";
       DataTypeArray.add(DataTypeString);
       DataTypeString="CharType";
       DataTypeArray.add(DataTypeString);
       DataTypeString="Text";
       DataTypeArray.add(DataTypeString);
       DataTypeString="Dates";
       DataTypeArray.add(DataTypeString);
       for si=0 , si< DataTypeArray.getLength() , ++si
       {

              if(DataTypeArray(si)==varType)
              {
                  return si;
              }


       }
       return -1;
    }
        func generateTable( tableName : String ,colsMod : Array[Array[String]] ,modsParams : Array[ Array[Array[String]]] , var : Array[String] , types : Array[String]) : TioSrdRef
        {
            def TioSrdRef: alias SrdRef[Core.Basic.TiObject];
            use Core.Basic;
            def result: TioSrdRef;
            def resArray : Array[TioSrdRef];

            def i : int;
            def j : int;
            def k : int;
            def c : int;
            def index: int;
            if !Spp.astMgr.buildAst
                        (
                        (ast  def  mySqlObj : MySql.Db ),
                        Map[String, ref[TiObject]]()
                            .set(String("mySqlObj"), Core.Data.Ast.Identifier("mySqlObj")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build table var : error\n");
                    }
                    resArray.add(result);
                    k=0;
            for i=0 , i< var.getLength() , i+=1
            {
                index=-1
                for j=0 , j< colsMod(i).getLength() && index==-1, j+=1
                {
                    index=TableBuilder.isDataType(colsMod(i)(j));
                }

                if(index>-1)
                {


                    if (index==0)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = integerDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("integerDataType"), Core.Data.Ast.Identifier("integerDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==1)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = bigIntegerDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("bigIntegerDataType"), Core.Data.Ast.Identifier("bigIntegerDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==2)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = smallIntegerDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("smallIntegerDataType"), Core.Data.Ast.Identifier("smallIntegerDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==3)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = tinyIntegerDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("tinyIntegerDataType"), Core.Data.Ast.Identifier("tinyIntegerDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==4)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = realDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("realDataType"), Core.Data.Ast.Identifier("realDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==5)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = floatDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("floatDataType"), Core.Data.Ast.Identifier("floatDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==6)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = decimalDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("decimalDataType"), Core.Data.Ast.Identifier("decimalDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==7)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = xmlDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("xmlDataType"), Core.Data.Ast.Identifier("xmlDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==8)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = varCharDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("varCharDataType"), Core.Data.Ast.Identifier("varCharDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==9)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = charTypeDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("charTypeDataType"), Core.Data.Ast.Identifier("charTypeDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==10)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = textDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("textDataType"), Core.Data.Ast.Identifier("textDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                    else if (index==11)
                    {

                        if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setColsName(String("{{varname}}"));  DataTypePtr = datesDataType~ptr;  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("datesDataType"), Core.Data.Ast.Identifier("datesDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                    }
                     resArray.add(result)
                    for j=0 , j< colsMod(i).getLength() , j+=1
                    {

                        if(TableBuilder.numOfParams(colsMod(i)(j))!=-1)
                        {
                            if(colsMod(i)(j)=="notnull")
                            {

                                 if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData DataTypePtr~cnt.FConstrants.setNotNullConstraint();  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("datesDataType"), Core.Data.Ast.Identifier("datesDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                            }
                            else if(colsMod(i)(j)=="unique")
                            {

                                if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData DataTypePtr~cnt.FConstrants.setUniqueConstraint();  } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("datesDataType"), Core.Data.Ast.Identifier("datesDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                            }
                            else if(colsMod(i)(j)=="pk")
                            {

                                if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData pkArray.add(String("{{varname}}")); } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("varname"), Core.Data.Ast.Identifier(var(i)))
                            .set(String("datesDataType"), Core.Data.Ast.Identifier("datesDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                            }
                            if(TableBuilder.numOfParams(colsMod(i)(j))>0)
                            {
                                if(colsMod(i)(j)=="defult")
                                {

                                    if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData DataTypePtr~cnt.FConstrants.setDefaultConstraint(String("{{myvar}}")); } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("myvar"), Core.Data.Ast.Identifier(modsParams(i)(j)(0)))
                            .set(String("datesDataType"), Core.Data.Ast.Identifier("datesDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    k=k+1;
                                }
                                else if(colsMod(i)(j)=="check")
                                {

                                    if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData DataTypePtr~cnt.FConstrants.setCheckConstraint(String("{{myvar}}")); } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("myvar"), Core.Data.Ast.Identifier(modsParams(i)(j)(0)))
                            .set(String("datesDataType"), Core.Data.Ast.Identifier("datesDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                     k=k+1;
                                }
                                else if(colsMod(i)(j)=="fk")
                                {

                                    if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData tableConst.addForgenKey(String("{{myvar}}"),String("{{myvar2}}"),String("{{myvar3}}")); } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("myvar"), Core.Data.Ast.Identifier(modsParams(i)(j)(0)))
                            .set(String("myvar2"), Core.Data.Ast.Identifier(modsParams(i)(j)(3)))
                            .set(String("myvar3"), Core.Data.Ast.Identifier(modsParams(i)(j)(2)))
                            .set(String("datesDataType"), Core.Data.Ast.Identifier("datesDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                     k=k+1;
                                }


                            }
                            resArray.add(result);
                    }

                }
                if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData table.setDataType(DataTypePtr); table.addToColsString(); DataTypePtr~cnt.FConstrants.clearFConstraint(); } ),
                        Map[String, ref[TiObject]]()

                            .set(String("beforData"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("myvar"), Core.Data.Ast.Identifier(modsParams(i)(j)(0)))
                            .set(String("myvar2"), Core.Data.Ast.Identifier(modsParams(i)(j)(3)))
                            .set(String("myvar3"), Core.Data.Ast.Identifier(modsParams(i)(j)(2)))
                            .set(String("datesDataType"), Core.Data.Ast.Identifier("datesDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                     k=k+1;
                     resArray.add(result);
            }
        }

         if !Spp.astMgr.buildAst
                        (
                        (ast function create(dbCon : DbConBuilder.DbConBuilder )
                        {
                            use DataType;
                            def DataTypePtr : ptr[Data];
                            def integerDataType : DataType.Integer;
                            def bigIntegerDataType : DataType.BigInteger;
                            def smallIntegerDataType : SmallInteger;
                            def tinyIntegerDataType : TinyInteger;
                            def realDataType : Real;
                            def floatDataType : DataType.Float;
                            def decimalDataType : Decimal;
                            def xmlDataType : Xml;
                            def varCharDataType : VarChar;
                            def charTypeDataType : CharType;
                            def textDataType : Text;
                            def datesDataType : Dates;
                            def paramsModsArray : Array[String];
                            def val : String;
                            def  mySqlObj : MySql.Db ;
                            def  pgSqlObj : PostgresSql.Db ;
                            def pkArray : Array[String];
                            def tableConst :Constraints.TableConstraints;
                            def table : Create.Create;
                            def colsName : Array[String];
                            def tableNameMod : String;
                            if dbCon.getDbConType()==0
                            {
                                mySqlObj=dbCon.mySqlConBuilder();  table.setMysqlObj(mySqlObj);
                            }
                            else if dbCon.getDbConType()==0
                            {
                                pgSqlObj=dbCon.pgSqlConBuilder(); table.setPgSqlObj(pgSqlObj);
                            }
                            insertCols
                            tableConst.setPrimaryKeyConstraint(pkArray);
                            table.setTConst(tableConst~ptr);
                            table.setTConstString();
                            table.setExecString();
                            table.setTableName(String("{{tableName}}"));
                            def ex:String;
                            table.setExecString();
                            ex=table.getExecString();
                            table.exec();
                        } ),
                        Map[String, ref[TiObject]]()

                            .set(String("insertCols"), resArray(k))
                            .set(String("DataTypePtr"), Core.Data.Ast.Identifier("DataTypePtr"))
                            .set(String("tableName"), Core.Data.Ast.Identifier(tableName))
                            .set(String("datesDataType"), Core.Data.Ast.Identifier("datesDataType")),
                        result
                        )
                    {
                        System.fail(1, "generateTable/build Data Type var : error\n");
                    }
                    return result

    }


    macro autoCreate[parent , tableName ]
    {
             preprocess
        {

            def colsMod : Array[Array[String]];
            def modsParams :Array[ Array[Array[String]]];
            def var : Array[String];
            var=TableBuilder.implementGetElementNames[elementType == "var", parent];
            def types : Array[String];
            types=TableBuilder.implementGetElementTypes[elementType == "var", parent];
            TableBuilder.implementGetElementMods[elementType == "var", parent ];

            if !Spp.astMgr.insertAst(
                                                        TableBuilder.generateTable(tableName , colsMod , modsParams , var ,types ).obj
                                                             ) {
                                                           System.fail(1, "Failed to insert statment.\n");
                                                                 }
        }


}
}

