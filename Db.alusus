@merge module Rows {
    class Db {
        def tlsDriver: Threading.ThreadLocal[SrdRef[Driver]];
        def logging: Bool = true;

        handler this~init() {}
        handler this~init(d: SrdRef[Driver]) {
            this.init(d);
        }
        handler this~init(initializer: closure(ref[SrdRef[Driver]])) {
            this.init(initializer);
        }

        handler this.init(d: SrdRef[Driver]) {
            this.tlsDriver.value = d;
        }
        handler this.init(initializer: closure(ref[SrdRef[Driver]])) {
            this.tlsDriver.initializer = initializer;
        }

        handler this.driver: ref[Driver] {
            return this.tlsDriver.value;
        }

        handler this.isConnected(): Bool {
            return this.driver~ptr != 0 && this.driver.isConnected();
        }

        handler this.getLastError(): String {
            if this.driver~ptr == 0 return String("Not initialized")
            else return this.driver.getLastError();
        }

        handler this.exec(select: ref[Select]): Possible[Array[Array[Nullable[String]]]] {
            return this._execSelect(select.generateSqlString(), "Select");
        }

        handler this.exec(update: ref[Update]): Possible[Int] {
            return this._exec(update.generateSqlString(), "Update");
        }

        handler this.exec(insert: ref[Insert]): Possible[Int] {
            return this._exec(insert.generateSqlString(), "Insert");
        }

        handler this.exec(delete: ref[Delete]): Possible[Int] {
            return this._exec(delete.generateSqlString(), "Delete");
        }

        handler this.exec(createTable: ref[CreateTable]): Possible[Int] {
            return this._exec(createTable.generateSqlString(this.driver), "Table creation");
        }

        handler this.execSelect(statement: CharsPtr, args: ...any): Possible[Array[Array[Nullable[String]]]] {
            def sql: String;
            prepareStatement[sql, statement, args];
            return this._execSelect(sql, "Raw query");
        }

        handler this.exec(statement: CharsPtr, args: ...any): Possible[Int] {
            def sql: String;
            prepareStatement[sql, statement, args];
            return this._exec(sql, "Raw query");
        }
        handler this._reconnectAttempt(): bool{
            def numberOfTest : int =10;
            while numberOfTest > 0 {
                if !this.driver.isConnected(){
                    this.driver.connect(this.driver.getConnectionParams());
                }
                else {
                    return true;
                }
                numberOfTest-=1;
            }
            return false;
        }
        handler this._execSelect(sql: String, operationName: CharsPtr): Possible[Array[Array[Nullable[String]]]] {
            if this.driver~ptr == 0 {
                return Possible[Array[Array[Nullable[String]]]].failure(Errors.dbNotInitialized());
            } else if !this._reconnectAttempt(){
                return Possible[Array[Array[Nullable[String]]]].failure(Errors.dbNotConnected());
            } else {
                if this.logging {
                    Console.print("%s>> Executing SQL:%s\n%s\n", Console.Style.FG_GREEN, Console.Style.RESET, sql.buf);
                }
                if !this.driver.exec(sql, true) {
                    def err: String = this.driver.getLastError();
                    if this.logging {
                        Console.print("%s>> SQL Error:%s\n%s\n", Console.Style.FG_RED, Console.Style.RESET, err.buf);
                    }
                    return Possible[Array[Array[Nullable[String]]]].failure(Errors.sqlError(err));
                } else {
                    def numberOfFileds: int;
                    numberOfFileds = this.driver.getColumnCount();
                    def result: Array[Array[Nullable[String]]];
                    while this.driver.fetchNextRow() {
                        def row: Array[Nullable[String]];
                        def i: int;
                        for i = 0, i < numberOfFileds, i = i + 1 {
                            row.add(this.driver.getValue(i));
                        }
                        result.add(row);
                    }
                    return Possible[Array[Array[Nullable[String]]]].success(result);
                }
            }
        }

        handler this._exec(sql: String, operationName: CharsPtr): Possible[Int] {
            if this.logging {
                Console.print("%s>> Executing SQL:%s\n%s\n", Console.Style.FG_GREEN, Console.Style.RESET, sql.buf);
            }
            if this.driver~ptr == 0 {
	            return Possible[Int].failure(Errors.dbNotInitialized());
            } else if !this._reconnectAttempt(){
	            return Possible[Int].failure(Errors.dbNotConnected());
            } else {
                if !this.driver.exec(sql, false) {
                    def err: String = this.driver.getLastError();
                    if this.logging {
                        Console.print("%s>> SQL Error:%s\n%s\n", Console.Style.FG_RED, Console.Style.RESET, err.buf);
                    }
                    return Possible[Int].failure(Errors.sqlError(err));
                }
                return Possible[Int].success(this.driver.getAffectedRowCount());
            }
        }

        handler [Model: type] this.from: Query[Model] {
            return Query[Model](this);
        }

        handler [Model: type] this.save(model: ref[Model]): Possible[Int] {
            return Query[Model](this).save(model);
        }

        handler [Model: type] this.schemaBuilder: SchemaBuilder[Model] {
            return SchemaBuilder[Model](this);
        }
    }
}
