import "Srl/Console.alusus";
import "libpq.so";
import "libmysqlclient.so";
/*
    Linux .so | .so.0
    Mac OS .dylib
    Windows .lib
*/

module MySql {

		use Srl;
	class MYSQL{}
	class MYSQL_RES{}
	def MYSQL_ROW: alias ptr[array[CharsPtr]];
	class MYSQL_FIELD
	{
		def name:CharsPtr;
		def org_name:CharsPtr;
		def table:CharsPtr;
		def org_table:CharsPtr;
		def db:CharsPtr;
		def catalog:CharsPtr;
		def define:CharsPtr;
		def length:ArchWord;
		def max_length:ArchWord;
		def name_length:Word;
		def org_name_length:Word;
		def table_length:Word;
		def org_table_length:Word;
		def db_length:Word;
		def catalog_length:Word;
		def def_length:Word;
		def flags:Word;
		def decimals:Word;
		def charsetnr:Word;
		def field_type:int;
		def extension:ptr;	
	}


    class Db {
	
        use Srl;
        def Conn: ptr[MYSQL] ;
        def Res: ptr[MYSQL_RES] ;
	def ResultState: int ;
	def Row: MYSQL_ROW;
	def Field: ptr[MYSQL_FIELD];
	def Host: String="";
	def User: String="";
	def Password: String="";
	def DbName: String="";
	def Port: int=0;
	def UnixSocket: String=null;
	def ClientFlag: int=0;
	def ConState: String="connected";

        handler this~init(Host: String , User: String ,Password: String , DbName: String , Port :int , UnixSocket: String ,ClientFlag :int )
        {

	    this.Host=Host;
	    this.User=User;
	    this.Password=Password;
	    this.DbName=DbName;
	    this.Port=Port;
	    this.UnixSocket=null;
	    this.ClientFlag=ClientFlag;
            this.connectDb();
            
          
        }

        handler this~init(ref[Db]) 
        { 

            this.Res=value.Res;

            this.Field=value.Field;
            this.Row=value.Row;
            this.Port=value.Port;
	    this.Host=value.Host;
	    this.User=value.User;
	    this.Password=value.Password;
	    this.DbName=value.DbName;
	    this.Port=value.Port;
	    this.UnixSocket=null;
	    this.ClientFlag=value.ClientFlag;
	    this.connectDb();
        }
        handler this = ref[Db]
        {

            this.Field=value.Field;
            this.Row=value.Row;
            this.Port=value.Port;
	    this.Host=value.Host;
	    this.User=value.User;
	    this.Password=value.Password;
	    this.DbName=value.DbName;
	    this.Port=value.Port;
	    this.UnixSocket=value.UnixSocket;
	    this.ClientFlag=value.ClientFlag;
	    this.connectDb();
        }


        handler this~init() 
        {

        }


        handler this.setHost(Host: String)
        {
	    this.Host=Host;  
        } 
        handler this.getHost() : String
        {
	    return this.Host;  
        }

        handler this.setUser(User: String)
        {
	    this.User=User;  
        } 
        handler this.getUser() : String
        {
	    return this.User;  
        }   

        handler this.setPassword(Password: String)
        {
	    this.Password=Password;  
        } 
        handler this.getPassword() : String
        {
	    return this.Password;  
        }

        handler this.setDbName(DbName: String)
        {
	    this.DbName=DbName;  
        } 
        handler this.getDbName() : String
        {
	    return this.DbName;  
        }

        handler this.setPort(Port: int) 
        {
	    this.Port=Port;  
        } 
        handler this.getPort() : int 
        {
	    return this.Port;  
        }

        handler this.setUnixSocket(UnixSocket: String)
        {
	    this.UnixSocket=UnixSocket;  
        } 
        handler this.getUnixSocket() : String
        {
	    return this.UnixSocket;  
        }

        handler this.setClientFlag(ClientFlag: int) 
        {
	    this.ClientFlag=ClientFlag;  
        } 
        handler this.getClientFlag() : int 
        {
	    return this.ClientFlag;  
        }

        handler this.setConnPra( Host: String , User: String ,Password: String , DbName: String , Port :int , UnixSocket: String ,ClientFlag :int)
        {
	    this.Host=Host;
	    this.User=User;
	    this.Password=Password;
	    this.DbName=DbName;
	    this.Port=Port;
	    this.UnixSocket=UnixSocket;
	    this.ClientFlag=ClientFlag;
	    this.connectDb();  
        }

        handler this.connectDb()
        {
            this.Conn=initl(null);


	    if (connect(this.Conn,this.Host.buf , this.User.buf  , this.Password.buf , this.DbName.buf  , this.Port ,null,  this.ClientFlag)==null)
	    {
	        this.ConState= MySql.errorMessage(this.Conn);
	    }
	    else
	    {
	        this.ConState=="connected";
	    }


        }
       

        handler this.exec(Sql: CharsPtr) 
        {   

            this.ResultState= MySql.exec(this.Conn,Sql);

            this.Res= MySql.storeRes(this.Conn);
        }

        handler this.storeRes() {
            this.Res= MySql.storeRes(this.Conn);
        }

        handler this.getFiledsNumber():int
        {
            return MySql.getFiledsNumber(this.Res);
        }
        handler this.getRow() {
            this.Row = MySql.getRow(this.Res);
        }

        handler this.getCol() {
            this.Field = MySql.getCol(this.Res);
        }

        handler this.clearResult(){
             MySql.clearResult(this.Res);
        }

        handler this.endConnection(){
             MySql.endConnection(this.Conn);
        }

        handler this.errorMessage():CharsPtr{


             return MySql.errorMessage(this.Conn);
        }

        handler this.getNextResult(Query : CharsPtr , NumberOfParam : int , ParamValues :ptr[array[CharsPtr]] , DataType : int):int {
             this.ResultState= MySql.getNextResult(this.Conn );
	     return this.ResultState;
        }
    }    
    @expname[mysql_real_connect]
    func connect(Conn :ptr[MYSQL],Host: CharsPtr , User: CharsPtr ,Password: CharsPtr , DbName: CharsPtr , Port :int , UnixSocket: CharsPtr ,ClientFlag :int ) : ptr[MYSQL];
    
    @expname[mysql_query]
    func exec(Conn: ptr[MYSQL] , Query: CharsPtr): int;

    @expname[mysql_init]
    func initl(Conn: ptr[MYSQL] ): ptr[MYSQL];

    @expname[mysql_store_result]
    func storeRes(Conn: ptr[MYSQL] ): ptr[MYSQL_RES];

    @expname[mysql_fetch_row]
    func getRow(Res: ptr[MYSQL_RES]): MYSQL_ROW;

    @expname[mysql_free_result]
    func clearResult(Res: ptr[MYSQL_RES]);

    @expname[mysql_close]
    func endConnection(Conn: ptr[MYSQL]);

    @expname[mysql_error]
    func errorMessage(Conn: ptr[MYSQL]):CharsPtr;

    @expname[mysql_num_fields]
    func getFiledsNumber(Res: ptr[MYSQL_RES]):int;

    @expname[mysql_fetch_field]
    func getCol(Res: ptr[MYSQL_RES]):ptr[MYSQL_FIELD];

    @expname[mysql_next_result]
    func getNextResult(Conn: ptr[MYSQL]):int;


}
