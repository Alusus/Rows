import "Srl/Console.alusus";
import "Srl/String.alusus";
import "libmysqlclient.so.21";
/*
    Linux .so | .so.0
    Mac OS .dylib
    Windows .lib
*/

@merge module Rows {
    module MySql {
        class Connection {}
        class Result {}
        def Row: alias ptr[array[CharsPtr]];

        class Field {
            def name: CharsPtr;
            def orgName: CharsPtr;
            def table: CharsPtr;
            def orgTable: CharsPtr;
            def db: CharsPtr;
            def catalog: CharsPtr;
            def define: CharsPtr;
            def length: ArchWord;
            def maxLength: ArchWord;
            def nameLength: Word;
            def orgNameLength: Word;
            def tableLength: Word;
            def orgTableLength: Word;
            def dbLength: Word;
            def catalogLength: Word;
            def defLength: Word;
            def flags: Word;
            def decimals: Word;
            def charsetnr: Word;
            def fieldType: int;
            def extension: ptr;
        }

        class Db {
            def conn: ptr[Connection];
            def res: ptr[Result];
            def resultState: int;
            def row: Row;
            def field: ptr[Field];
            def host: String = "";
            def user: String = "";
            def password: String = "";
            def dbName: String = "";
            def port: int = 0;
            def unixSocket: String = null;
            def clientFlag: int = 0;
            def conState: String = "connected";

            handler this~init(
                host: String, user: String, password: String, dbName: String, port :int, unixSocket: String, clientFlag :int
            ) {
                this.host = host;
                this.user = user;
                this.password = password;
                this.dbName = dbName;
                this.port = port;
                this.unixSocket = null;
                this.clientFlag = clientFlag;
                this.connectDb();
            }

            handler this~init(ref[Db]) {
                this.res = value.res;
                this.field = value.field;
                this.row = value.row;
                this.port = value.port;
                this.host = value.host;
                this.user = value.user;
                this.password = value.password;
                this.dbName = value.dbName;
                this.port = value.port;
                this.unixSocket = null;
                this.clientFlag = value.clientFlag;
                this.connectDb();
            }

            handler this = ref[Db] {
                this.field = value.field;
                this.row = value.row;
                this.host = value.host;
                this.user = value.user;
                this.password = value.password;
                this.dbName = value.dbName;
                this.port = value.port;
                this.unixSocket = value.unixSocket;
                this.clientFlag = value.clientFlag;
                this.connectDb();
            }

            handler this~init() {
            }

            handler this.setHost(host: String) {
                this.host=host;
            }

            handler this.getHost(): String {
                return this.host;
            }

            handler this.setUser(user: String) {
                this.user=user;
            }

            handler this.getUser(): String {
                return this.user;
            }

            handler this.setPassword(password: String) {
                this.password = password;
            }

            handler this.getPassword(): String {
                return this.password;
            }

            handler this.setDbName(dbName: String) {
                this.dbName = dbName;
            }

            handler this.getDbName(): String {
                return this.dbName;
            }

            handler this.setPort(port: int) {
                this.port = port;
            }

            handler this.getPort(): int {
                return this.port;
            }

            handler this.setUnixSocket(unixSocket: String) {
                this.unixSocket = unixSocket;
            }

            handler this.getUnixSocket(): String {
                return this.unixSocket;
            }

            handler this.setClientFlag(clientFlag: int) {
                this.clientFlag = clientFlag;
            }

            handler this.getClientFlag(): int {
                return this.clientFlag;
            }

            handler this.setConnPra(
                host: String, user: String, password: String, dbName: String, port :int, unixSocket: String, clientFlag :int
            ) {
                this.host = host;
                this.user = user;
                this.password = password;
                this.dbName = dbName;
                this.port = port;
                this.unixSocket = unixSocket;
                this.clientFlag = clientFlag;
                this.connectDb();
            }

            handler this.connectDb() {
                this.conn=initl(null);

                if connect(
                    this.conn, this.host.buf, this.user.buf, this.password.buf,
                    this.dbName.buf, this.port, null, this.clientFlag
                ) == null {
                    this.conState = MySql.errorMessage(this.conn);
                } else {
                    this.conState = "connected";
                }
            }


            handler this.exec(Sql: CharsPtr) {
                this.resultState = MySql.exec(this.conn,Sql);
                this.res = MySql.storeRes(this.conn);
            }

            handler this.storeRes() {
                this.res = MySql.storeRes(this.conn);
            }

            handler this.getFiledsNumber(): int {
                return MySql.getFiledsNumber(this.res);
            }

            handler this.getRow() {
                this.row = MySql.getRow(this.res);
            }

            handler this.getCol() {
                this.field = MySql.getCol(this.res);
            }

            handler this.clearResult() {
                 MySql.clearResult(this.res);
            }

            handler this.endConnection() {
                 MySql.endConnection(this.conn);
            }

            handler this.errorMessage(): CharsPtr {
                 return MySql.errorMessage(this.conn);
            }

            handler this.getNextResult(
                Query : CharsPtr, NumberOfParam: int, ParamValues: ptr[array[CharsPtr]], DataType: int
            ): int {
                this.resultState = MySql.getNextResult(this.conn );
                return this.resultState;
            }
        }

        @expname[mysql_real_connect]
        func connect(
            conn :ptr[Connection], host: CharsPtr, user: CharsPtr, password: CharsPtr,
            dbName: CharsPtr, port :int, unixSocket: CharsPtr, clientFlag :int
        ): ptr[Connection];

        @expname[mysql_query]
        func exec(conn: ptr[Connection] , Query: CharsPtr): int;

        @expname[mysql_init]
        func initl(conn: ptr[Connection] ): ptr[Connection];

        @expname[mysql_store_result]
        func storeRes(conn: ptr[Connection] ): ptr[Result];

        @expname[mysql_fetch_row]
        func getRow(res: ptr[Result]): Row;

        @expname[mysql_free_result]
        func clearResult(res: ptr[Result]);

        @expname[mysql_close]
        func endConnection(conn: ptr[Connection]);

        @expname[mysql_error]
        func errorMessage(conn: ptr[Connection]):CharsPtr;

        @expname[mysql_num_fields]
        func getFiledsNumber(res: ptr[Result]):int;

        @expname[mysql_fetch_field]
        func getCol(res: ptr[Result]):ptr[Field];

        @expname[mysql_next_result]
        func getNextResult(conn: ptr[Connection]):int;
    }
}

