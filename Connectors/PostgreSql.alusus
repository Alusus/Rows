import "Srl/Console.alusus";
import "Srl/String";
import "libpq.so.5";
/*
    Linux .so | .so.0
    Mac OS .dylib
    Windows .lib
*/

@merge module Rows {
    module PostgreSql {
        def ConnectionStatus: {
            def OK: 0;
            def BAD: 1;
        }

        class Connection {
        }

        class Result {
        }

        class Db {
            def conn: ptr[Connection] ;
            def res: ptr[Result] ;
            def resultState: int ;
            def connString: String;

            handler this~init(connString: String) {
                this.connString = connString;
                this.connectDb();
            }

            handler this~init() {
            }

            handler this~init(ref[Db]) {
                this.resultState = value.resultState;
                this.connString = value.connString;
            }

            handler this = ref[Db] {
                this.resultState = value.resultState;
                this.connString = value.connString;
                this.conn = value.conn;
            }

            handler this.setConnstring(connString: String ) {
               this.connString = connString;
               connectDb();
            }

            handler this.connectDb() {
                this.conn = connect(this.connString.buf);
            }

            handler this.exec(Sql: CharsPtr) {
               this.res = PostgreSql.exec(this.conn,Sql);
            }

            handler this.connStatus(): int {
                return PostgreSql.connStatus(this.conn);
            }

            handler this.resStatus(): int {
                this.resultState = PostgreSql.resStatus(this.res);
                return this.resultState;
            }

            handler this.getValue(Row : int , Collomn : int): CharsPtr {
                return PostgreSql.getValue(this.res , Row , Collomn);
            }

            handler this.getCols():int {
                return PostgreSql.getCols(this.res);
            }

            handler this.getRows():int {
                return PostgreSql.getRows(this.res);
            }

            handler this.clearResult(){
                 PostgreSql.clearResult(this.res);
            }

            handler this.endConnection(){
                 PostgreSql.endConnection(this.conn);
            }

            handler this.errorMessage():CharsPtr{
                 return PostgreSql.errorMessage(this.conn);
            }

            handler this.getColumnNames(Collomn : int):CharsPtr {
                return PostgreSql.getColumnNames(this.res , Collomn);
            }

            handler this.execWithParams(Query : CharsPtr , NumberOfParam : int , ParamValues :ptr[array[CharsPtr]] , DataType : int) {
                 this.res= PostgreSql.execWithParams(this.conn , Query , NumberOfParam , null , ParamValues , null , null , DataType);
            }
        }

        @expname[PQconnectdb]
        func connect(connString: CharsPtr): ptr[Connection];

        @expname[PQexec]
        func exec(conn: ptr[Connection], query: CharsPtr): ptr[Result];

        @expname[PQstatus]
        func connStatus(conn: ptr[Connection]): int;

        @expname[PQresultStatus]
        func resStatus(res: ptr[Result]): int;

        @expname[PQgetvalue]
        func getValue(res: ptr[Result], row: int, collomn: int): CharsPtr;

        @expname[PQntuples]
        func getRows(res: ptr[Result]): int;

        @expname[PQclear]
        func clearResult(res: ptr[Result]);

        @expname[PQfinish]
        func endConnection(conn: ptr[Connection]);

        @expname[PQerrorMessage]
        func errorMessage(conn: ptr[Connection]): CharsPtr;

        @expname[PQnfields]
        func getCols(res: ptr[Result]): int;

        @expname[PQfname]
        func getColumnNames(res: ptr[Result] , colNumber: int): CharsPtr;

        @expname[PQexecParams]
        func execWithParams(
            conn: ptr[Connection],
            query: CharsPtr,
            numberOfParam: int,
            server : ptr[int],
            paramValues : ptr[array[CharsPtr]],
            b: ptr[int],
            s: ptr[int],
            dataType: int
        ): ptr[Result];
    }
}

